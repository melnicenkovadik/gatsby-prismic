{"componentChunkName":"component---src-templates-page-js","path":"/page/blog-page","result":{"data":{"prismicPage":{"url":"/page/blog-page","uid":"blog-page","type":"page","id":"7c365c11-e757-51c1-b510-1061a7ea124c","lang":"en-us","alternate_languages":[{"id":"YMImKhEAACUA2XEN","type":"page","lang":"ru","uid":"blog-page","url":"/page/ru/blog-page"},{"id":"YMImExEAACIA2XDG","type":"page","lang":"fr-fr","uid":"blog-page","url":"/page/fr-fr/blog-page"}],"data":{"body":[{"id":"2e9c47bf-661f-551b-8f18-a9eed1408c3a","items":[{"blog_item_title":{"html":"<h3>Sony officially unveils Airpeak S1 drone for $ 9000 (no camera)</h3>","raw":[{"type":"heading3","text":"Sony officially unveils Airpeak S1 drone for $ 9000 (no camera)","spans":[]}],"text":"Sony officially unveils Airpeak S1 drone for $ 9000 (no camera)"},"content":{"html":"<p>The Association of Ukrainian Automotive Companies &quot;Ukravtoprom&quot; summed up the local car market for trees for five months of the current direction, revealed the most popular new models. Over the period Ukrainians Buy almost 40 thousand new cars (39.6 thousand).</p>\n    <div data-oembed=\"https://youtu.be/7CZTLogln34\"\n      data-oembed-type=\"video\"\n      data-oembed-provider=\"YouTube\"\n      >\n\n      <iframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/7CZTLogln34?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n    </div>\n  <p>The greatest demand in this period was the Toyota RAV4 car, from January to May this model was purchased by 2586 motorists. The second most popular was the Korean compact crossover Kia Sportage, for which 2,235 buyers voted with their wallets. Renault Duster closes the top three, this model has 2,110 registrations.</p>\n    <p class=\" block-img\">\n      <img src=\"https://images.prismic.io/multilang-prismic-gatsby-example/ede3bd54-2b76-4779-a4bb-df5409cc667e_foto-2-2-5.jpg?auto=compress,format\" alt=\"car\" copyright=\"\">\n    </p>\n  <ol><li>Toyota RAV4 — 2586 pcs.</li><li>Kia Sportage — 2235 pcs.</li><li>Renault Duster — 2110 pcs.</li><li>Renault Sandero – 1207 pcs.</li><li>Renault Logan – 1134 pcs.</li><li>Nissan Qashqai – 1117 pcs.</li><li>Volkswagen Touareg – 966 pcs.</li><li>Hyundai Tucson – 877 pcs.</li><li>Toyota Land Cruiser Prado – 846 pcs.</li><li>Mazda CX5 – 823 pcs.</li></ol><p>Thus, 9 out of 10 most popular cars on the Ukrainian market are crossovers. In total, according to the results of the first five months of this year, crossovers account for 3/4 of the Ukrainian market of new passenger cars. Note that in May alone, Ukrainians purchased 8.5 thousand new passenger cars, 33.2 thousand used foreign cars and 622 electric vehicles.</p>","raw":[{"type":"paragraph","text":"The Association of Ukrainian Automotive Companies \"Ukravtoprom\" summed up the local car market for trees for five months of the current direction, revealed the most popular new models. Over the period Ukrainians Buy almost 40 thousand new cars (39.6 thousand).","spans":[]},{"type":"embed","oembed":{"height":113,"width":200,"embed_url":"https://youtu.be/7CZTLogln34","type":"video","version":"1.0","title":"Starship | SN15 | Flight Test Recap","author_name":"SpaceX","author_url":"https://www.youtube.com/c/SpaceX","provider_name":"YouTube","provider_url":"https://www.youtube.com/","cache_age":null,"thumbnail_url":"https://i.ytimg.com/vi/7CZTLogln34/hqdefault.jpg","thumbnail_width":480,"thumbnail_height":360,"html":"<iframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/7CZTLogln34?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"}},{"type":"paragraph","text":"The greatest demand in this period was the Toyota RAV4 car, from January to May this model was purchased by 2586 motorists. The second most popular was the Korean compact crossover Kia Sportage, for which 2,235 buyers voted with their wallets. Renault Duster closes the top three, this model has 2,110 registrations.","spans":[]},{"type":"image","url":"https://images.prismic.io/multilang-prismic-gatsby-example/ede3bd54-2b76-4779-a4bb-df5409cc667e_foto-2-2-5.jpg?auto=compress,format","alt":"car","copyright":null,"dimensions":{"width":1200,"height":900}},{"type":"o-list-item","text":"Toyota RAV4 — 2586 pcs.","spans":[]},{"type":"o-list-item","text":"Kia Sportage — 2235 pcs.","spans":[]},{"type":"o-list-item","text":"Renault Duster — 2110 pcs.","spans":[]},{"type":"o-list-item","text":"Renault Sandero – 1207 pcs.","spans":[]},{"type":"o-list-item","text":"Renault Logan – 1134 pcs.","spans":[]},{"type":"o-list-item","text":"Nissan Qashqai – 1117 pcs.","spans":[]},{"type":"o-list-item","text":"Volkswagen Touareg – 966 pcs.","spans":[]},{"type":"o-list-item","text":"Hyundai Tucson – 877 pcs.","spans":[]},{"type":"o-list-item","text":"Toyota Land Cruiser Prado – 846 pcs.","spans":[]},{"type":"o-list-item","text":"Mazda CX5 – 823 pcs.","spans":[]},{"type":"paragraph","text":"Thus, 9 out of 10 most popular cars on the Ukrainian market are crossovers. In total, according to the results of the first five months of this year, crossovers account for 3/4 of the Ukrainian market of new passenger cars. Note that in May alone, Ukrainians purchased 8.5 thousand new passenger cars, 33.2 thousand used foreign cars and 622 electric vehicles.","spans":[]}],"text":"The Association of Ukrainian Automotive Companies \"Ukravtoprom\" summed up the local car market for trees for five months of the current direction, revealed the most popular new models. Over the period Ukrainians Buy almost 40 thousand new cars (39.6 thousand).  The greatest demand in this period was the Toyota RAV4 car, from January to May this model was purchased by 2586 motorists. The second most popular was the Korean compact crossover Kia Sportage, for which 2,235 buyers voted with their wallets. Renault Duster closes the top three, this model has 2,110 registrations.  Toyota RAV4 — 2586 pcs. Kia Sportage — 2235 pcs. Renault Duster — 2110 pcs. Renault Sandero – 1207 pcs. Renault Logan – 1134 pcs. Nissan Qashqai – 1117 pcs. Volkswagen Touareg – 966 pcs. Hyundai Tucson – 877 pcs. Toyota Land Cruiser Prado – 846 pcs. Mazda CX5 – 823 pcs. Thus, 9 out of 10 most popular cars on the Ukrainian market are crossovers. In total, according to the results of the first five months of this year, crossovers account for 3/4 of the Ukrainian market of new passenger cars. Note that in May alone, Ukrainians purchased 8.5 thousand new passenger cars, 33.2 thousand used foreign cars and 622 electric vehicles."},"date":"2021-06-10","item_image":{"url":"https://images.prismic.io/slicemachine-blank/6b2bf485-aa12-44ef-8f06-dce6b91b9309_dancing.png?auto=compress%2Cformat"},"short_description":{"html":"<p>The Association of Ukrainian Automotive Companies &quot;Ukravtoprom&quot; summed up the local car market for trees for five months of the current direction, revealed the most popular new models. Over the period Ukrainians Buy almost 40 thousand new cars (39.6 thousand).</p>","raw":[{"type":"paragraph","text":"The Association of Ukrainian Automotive Companies \"Ukravtoprom\" summed up the local car market for trees for five months of the current direction, revealed the most popular new models. Over the period Ukrainians Buy almost 40 thousand new cars (39.6 thousand).","spans":[]}],"text":"The Association of Ukrainian Automotive Companies \"Ukravtoprom\" summed up the local car market for trees for five months of the current direction, revealed the most popular new models. Over the period Ukrainians Buy almost 40 thousand new cars (39.6 thousand)."}},{"blog_item_title":{"html":"<h3>SpaceX Goes Record - Targets 20 Falcon 9 Launches in H1 2021</h3>","raw":[{"type":"heading3","text":"SpaceX Goes Record - Targets 20 Falcon 9 Launches in H1 2021","spans":[]}],"text":"SpaceX Goes Record - Targets 20 Falcon 9 Launches in H1 2021"},"content":{"html":"\n    <p class=\" block-img\">\n      <img src=\"https://images.prismic.io/multilang-prismic-gatsby-example/05e8e11d-7d5a-4467-a9a1-e1406ef1abf3_e3svv47xiaapuma.jpg?auto=compress,format\" alt=\"\" copyright=\"\">\n    </p>\n  <p>In the first week of June, SpaceX carried out two successful launches of Falcon 9: on June 3, it sent a Dragon 2 truck on the 22nd supply mission to the ISS, and on June 6, it launched the 7-ton SXM-8 telecommunications satellite into orbit to support streaming for SiriusXM. ... And there are two more Falcon 9 launches on the schedule for this month.</p><p>The nearest launch is scheduled for June 17th - it will be a mission to orbit the satellite GPS III-05 (Neil Armstrong) for the US space forces. And for the first time, not a completely new, but a restored first stage - F9 B5 B1062.2 (it was also responsible for sending the previous GPS III-04 device in November 2020) will be used to send a &quot;national security&quot; cargo under a contract with the US military. Earlier, Elon Musk&#39;s company won a tender for the launch of five of the first six devices of this type. And if all goes well, then in the future SpaceX will be allowed to use the Falcon 9 B1062 for the third time to launch the GPS III SV06 satellite (Q4 2021 or early 2022).</p><p>Exactly one week after GPS III-05, SpaceX is planning another Falcon 9 launch with the Transporter-2 mission - this will be the second launch under the SmallSat Rideshare Program. Yes, we are talking about the very &quot;space minibuses&quot; SpaceX, in which the company sends a package of dozens of small satellites for different customers. Last time, the company set a world record by sending 143 satellites into orbit at a time.\r<br /></p><p>If all goes according to plan, June 2021 will mark the third month in SpaceX history with four successful launches. So far, SpaceX has not launched more than four Falcon 9s a month. All four June launches are paid for by third-party customers, which will positively affect the company&#39;s balance of payments, which has mainly launched Starlink internet satellites in its own interests over the past six months. More importantly, SpaceX will end the first half of 2021 with a record 20 successful missions and will be able to reach an impressive 40 launches by the end of the year, at its current pace.</p>","raw":[{"type":"image","url":"https://images.prismic.io/multilang-prismic-gatsby-example/05e8e11d-7d5a-4467-a9a1-e1406ef1abf3_e3svv47xiaapuma.jpg?auto=compress,format","alt":null,"copyright":null,"dimensions":{"width":1200,"height":800}},{"type":"paragraph","text":"In the first week of June, SpaceX carried out two successful launches of Falcon 9: on June 3, it sent a Dragon 2 truck on the 22nd supply mission to the ISS, and on June 6, it launched the 7-ton SXM-8 telecommunications satellite into orbit to support streaming for SiriusXM. ... And there are two more Falcon 9 launches on the schedule for this month.","spans":[]},{"type":"paragraph","text":"The nearest launch is scheduled for June 17th - it will be a mission to orbit the satellite GPS III-05 (Neil Armstrong) for the US space forces. And for the first time, not a completely new, but a restored first stage - F9 B5 B1062.2 (it was also responsible for sending the previous GPS III-04 device in November 2020) will be used to send a \"national security\" cargo under a contract with the US military. Earlier, Elon Musk's company won a tender for the launch of five of the first six devices of this type. And if all goes well, then in the future SpaceX will be allowed to use the Falcon 9 B1062 for the third time to launch the GPS III SV06 satellite (Q4 2021 or early 2022).","spans":[]},{"type":"paragraph","text":"Exactly one week after GPS III-05, SpaceX is planning another Falcon 9 launch with the Transporter-2 mission - this will be the second launch under the SmallSat Rideshare Program. Yes, we are talking about the very \"space minibuses\" SpaceX, in which the company sends a package of dozens of small satellites for different customers. Last time, the company set a world record by sending 143 satellites into orbit at a time.\r\n","spans":[]},{"type":"paragraph","text":"If all goes according to plan, June 2021 will mark the third month in SpaceX history with four successful launches. So far, SpaceX has not launched more than four Falcon 9s a month. All four June launches are paid for by third-party customers, which will positively affect the company's balance of payments, which has mainly launched Starlink internet satellites in its own interests over the past six months. More importantly, SpaceX will end the first half of 2021 with a record 20 successful missions and will be able to reach an impressive 40 launches by the end of the year, at its current pace.","spans":[]}],"text":" In the first week of June, SpaceX carried out two successful launches of Falcon 9: on June 3, it sent a Dragon 2 truck on the 22nd supply mission to the ISS, and on June 6, it launched the 7-ton SXM-8 telecommunications satellite into orbit to support streaming for SiriusXM. ... And there are two more Falcon 9 launches on the schedule for this month. The nearest launch is scheduled for June 17th - it will be a mission to orbit the satellite GPS III-05 (Neil Armstrong) for the US space forces. And for the first time, not a completely new, but a restored first stage - F9 B5 B1062.2 (it was also responsible for sending the previous GPS III-04 device in November 2020) will be used to send a \"national security\" cargo under a contract with the US military. Earlier, Elon Musk's company won a tender for the launch of five of the first six devices of this type. And if all goes well, then in the future SpaceX will be allowed to use the Falcon 9 B1062 for the third time to launch the GPS III SV06 satellite (Q4 2021 or early 2022). Exactly one week after GPS III-05, SpaceX is planning another Falcon 9 launch with the Transporter-2 mission - this will be the second launch under the SmallSat Rideshare Program. Yes, we are talking about the very \"space minibuses\" SpaceX, in which the company sends a package of dozens of small satellites for different customers. Last time, the company set a world record by sending 143 satellites into orbit at a time.\r\n If all goes according to plan, June 2021 will mark the third month in SpaceX history with four successful launches. So far, SpaceX has not launched more than four Falcon 9s a month. All four June launches are paid for by third-party customers, which will positively affect the company's balance of payments, which has mainly launched Starlink internet satellites in its own interests over the past six months. More importantly, SpaceX will end the first half of 2021 with a record 20 successful missions and will be able to reach an impressive 40 launches by the end of the year, at its current pace."},"date":"2021-06-10","item_image":{"url":"https://images.prismic.io/slicemachine-blank/76bc1e6e-67a0-41d9-9c3c-5a5d3161e6a9_bikini.png?auto=compress%2Cformat"},"short_description":{"html":"<p>In the first week of June, SpaceX carried out two successful launches of Falcon 9: on June 3, it sent a Dragon 2 truck on the 22nd supply mission to the ISS, and on June 6, it launched the 7-ton SXM-8 telecommunications satellite into orbit to support streaming for SiriusXM. ... And there are two more Falcon 9 launches on the schedule for this month.</p>","raw":[{"type":"paragraph","text":"In the first week of June, SpaceX carried out two successful launches of Falcon 9: on June 3, it sent a Dragon 2 truck on the 22nd supply mission to the ISS, and on June 6, it launched the 7-ton SXM-8 telecommunications satellite into orbit to support streaming for SiriusXM. ... And there are two more Falcon 9 launches on the schedule for this month.","spans":[]}],"text":"In the first week of June, SpaceX carried out two successful launches of Falcon 9: on June 3, it sent a Dragon 2 truck on the 22nd supply mission to the ISS, and on June 6, it launched the 7-ton SXM-8 telecommunications satellite into orbit to support streaming for SiriusXM. ... And there are two more Falcon 9 launches on the schedule for this month."}},{"blog_item_title":{"html":"<h3>Trying Out React 18 Alpha Release</h3>","raw":[{"type":"heading3","text":"Trying Out React 18 Alpha Release","spans":[]}],"text":"Trying Out React 18 Alpha Release"},"content":{"html":"<p>The notable features you can already try in React 18 are as follows:</p><ul><li>The new ReactDOM.createRoot() API replacing ReactDOM.render()</li><li>Batching improvements for fewer renders</li><li>SSR support for &lt;Suspense&gt; component</li><li>startTransition API for non-urgent state updates</li></ul><p>To try out React 18 Alpha in your project, you can install the @alpha version from NPM or Yarn:</p><pre>npm install react@alpha react-dom@alpha\n# or\nyarn add react@alpha react-dom@alpha</pre><p>If you bootstrap your React app using a Create React App, you may encounter an error could not resolve dependency caused by react-scripts as follows:</p><pre>Could not resolve dependency:\npeer react@&quot;&gt;= 16&quot; from react-scripts@4.0.3</pre><p>You can use the --force flag so that you can update both react and react-dom libraries:</p><pre>npm install react@alpha react-dom@alpha --force</pre><p>This tutorial will help you learn the new features already present in React 18 Alpha that I’ve been able to try myself.</p><h1>ReactDOM.createRoot() API explained</h1><p>The ReactDOM.createRoot() method replaces the ReactDOM.render() method that you normally use as the entry point of your React application.</p><p>The method is created to prevent React 18 update from crashing your application. The new method also allows you create a production build using React 18 Alpha and compare the performance with React 17.</p><p>Here’s an example of how to use the createRoot() method:</p><pre>import React from &#39;react&#39;;\nimport ReactDOM from &#39;react-dom&#39;;\nimport App from &#39;./App&#39;;const container = document.getElementById(&#39;root&#39;);// Create a root.\nconst root = ReactDOM.createRoot(container);// Render the top component to the root.\nroot.render(&lt;App /&gt;);</pre><p>When you update to React 18, an error log will appear in the console when you use .render() as your entry point, telling you to switch to the new Root API instead.</p><p>You can try React 18 features <strong>only</strong> after you use the createRoot() method.</p><p>For more information, you can visit <a  href=\"https://github.com/reactwg/react-18/discussions/5\">createRoot discussion page here</a>.</p><h1>Automatic batching improvements for rendering</h1><p>As you may already know, React is a library that re-renders the UI as a result of state changes.</p><p>For example, when you change the value of an arbitrary state from true to false , React should “react” by re-rendering the UI, adjusting what you see on the screen according to the code you’ve written.</p><p>The following &lt;App&gt; component will render a black or red colored header according to the color state value:</p><pre>function App() {\n  const [color, setColor] = useState(false);  function handleClick() {\n    setColor((color) =&gt; !color); // react re-renders\n  }  return (\n    &lt;div&gt;\n      &lt;button onClick={handleClick}&gt;Change color&lt;/button&gt;\n      &lt;h1 style={{ color: color ? &quot;red&quot; : &quot;black&quot; }}&gt;Hello&lt;/h1&gt;\n    &lt;/div&gt;\n  );\n}</pre><p>Each time the setColor() method is executed, React will immediately re-render the UI.</p><p><strong>Batching</strong> is mechanism used by React to group multiple state updates into one re-render. With batching, you will avoid unnecessary renders and optimize the rendering process</p><p>Getting back to the &lt;App&gt; component example, let’s add another state that gets updated when the handleClick() method is called:</p><pre>function App() {\n  const [color, setColor] = useState(false);\n  const [clickCount, setClickCount] = useState(0);\n  \n  function handleClick() {\n    setColor((color) =&gt; !color);\n    setClickCount((click) =&gt; click + 1);\n  }  return (\n    &lt;div&gt;\n      &lt;button onClick={handleClick}&gt;Change color&lt;/button&gt;\n      &lt;h1 style={{ color: color ? &quot;red&quot; : &quot;black&quot; }}&gt;\n        Hello, your click count is {clickCount}\n      &lt;/h1&gt;\n    &lt;/div&gt;\n  );\n}</pre><p>Without the batching mechanism, the code above will re-render the UI twice each time the handleClick() method is called. First to update the color, then one more time to update the click count.</p><p>However, the batching mechanism implemented in React 17 was not consistent. The batching won’t happen when you call the state update methods from a callback.</p><p>For example, suppose you fetch data from an API first before calling the setColor() and setClickCount(). The batching mechanism won’t kick in and React will re-render the UI twice:</p><pre>function handleClick() {\n  fetchUserData().then(() =&gt; {\n    setCount(c =&gt; c + 1); // Causes a re-render!\n    setFlag(f =&gt; !f); // Causes a re-render!\n  });\n}function fetchUserDate(){\n  // code omitted for brevity...\n}</pre><p>The same thing happens when you put the state update methods inside a setTimeout() callback:</p><pre>function handleClick() {\n  setTimeout(() =&gt; {\n    setColor((color) =&gt; !color);\n    setClickCount((click) =&gt; click + 1);\n  }, 1000);\n}</pre><p>React 18 solved the problem above by improving the batching mechanism.</p><p>Now the batching gets triggered when more than one state update methods are called from inside promises, setTimeout, native event handlers, or any other event that were not batched by React previously.</p><p>The discussion page for this feature can be found <a  href=\"https://github.com/reactwg/react-18/discussions/21\">here</a>.</p><h1>SSR support for &lt;Suspense&gt;</h1><p>The &lt;Suspense&gt; component is a feature of React library that allows you to wait for some code to load by adding a fallback component to render before the code is loaded.</p><p>Here’s an example of &lt;Suspense&gt; in action:</p><pre>&lt;Suspense fallback={&lt;LoadingSpinner /&gt;}&gt;\n  &lt;UserProfile /&gt;\n&lt;Suspense /&gt;</pre><p>You can read about &lt;Suspense&gt; in depth from React documentation.</p><p>In React 18, the &lt;Suspense&gt; feature is supported even when you render your components on the server using SSR. This update allows you to wrap server rendered components inside a &lt;Suspense&gt; component.</p><p>Any server side components wrapped inside &lt;Suspense&gt; will be streamed as HTML using the fallback component first, and once the component is ready, React will send new bits of HTML to replace the fallback component.</p><p>For example, suppose you have an &lt;Article&gt; and a &lt;Comments&gt; components as follows:</p><pre>&lt;Layout&gt;\n  &lt;Article /&gt;\n  &lt;Suspense fallback={&lt;Spinner /&gt;}&gt;\n    &lt;Comments /&gt;\n  &lt;/Suspense&gt;\n&lt;/Layout&gt;</pre><p>When rendered from the server, the &lt;Article&gt; component will be prioritized and the &lt;Comments&gt; component will be replaced by the fallback component &lt;Spinner&gt; . Once the &lt;Comments&gt; component is rendered on the server, React will send it to the browser, replacing the &lt;Spinner&gt; component.</p><p>For a deeper explanation on SSR and Suspense, you can visit the following <a  href=\"https://github.com/reactwg/react-18/discussions/37\">GitHub discussion</a> page.</p><h1>The startTransition API for non-urgent state updates</h1><p>The startTransition API is a new feature in React 18 designed to help your application stay responsive during state update that requires heavy computation power to render the UI.</p><p>One example of such update is when you create an input box that filters a list of data. The state update requires your React app to compute and display only data that matches the filter.</p><p>You may have two state update methods: one to handle the input value change and the other to handle the filter query.</p><pre>// Set the input value state\nsetInputValue(input);\n\n// Set the search query input. Reflected later on the UI\nsetSearchQuery(input);</pre><p>When the amount of elements to filter increases, the computation to filter the elements are also increased. This can cause your app to be <em>sluggish or even freeze</em> while the computation is being done.</p><p>To mitigate this issue, React allows you to mark certain updates as <strong>transitions</strong><em><strong></strong>.</em></p><p>Transition updates are handled as non-urgent updates, allowing React to prioritize on urgent updates first.</p><p>Back to the example, the update to the search query may be delayed by wrapping it inside the startTransition API as follows:</p><pre>import { startTransition } from &#39;react&#39;;// Urgent: Show what was typed\nsetInputValue(input);// Mark any state updates inside as transitions\nstartTransition(() =&gt; {\n  setSearchQuery(input);\n});</pre><p>The updates wrapped in startTransition will be interrupted when more important updates are triggered.</p><p>In the above example, the transition update for the search query will be stopped when the user types multiple multiple characters in a row. This optimizes React re-render performance and removes unnecessary computation for stale updates.</p><p>You can find more information on <a  href=\"https://github.com/reactwg/react-18/discussions/41\">startTransition API here</a>.</p><h1>Conclusion</h1><p>While several features mentioned in <a  href=\"https://github.com/reactwg/react-18/discussions/4\">React 18 introduction</a> page hasn’t even been released yet (useDeferredValue and &lt;SuspenseList&gt; for example)</p><p>React 18 Alpha already brings several interesting features to React that improves the concurrency power of the library. You can try it by installing the @alpha build of react and react-dom library.</p><p>There’s also no update on <a  href=\"https://blog.bitsrc.io/react-server-components-1ca621ac2519\">React Server Components</a> yet, but the new concurrent features like SSR support for Suspense and streaming HTML from the server may help in implementing Server Components later.</p><p>The <a  href=\"https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html\">release timeline for React 18</a> is as follows:</p><ul><li>Alpha version to gather feedback and offer support for React Working group (Available today)</li><li>Public Beta for everyone else to try (at least several months after Alpha version release)</li><li>Release Candidate (RC) build several weeks after the public beta version</li><li>The stable release will be several weeks after RC</li></ul><p>Thank you for reading this article. Feel free to try out React 18 yourself, but be warned that there may be breaking changes depending on how complex your React application is.</p>","raw":[{"type":"paragraph","text":"The notable features you can already try in React 18 are as follows:","spans":[]},{"type":"list-item","text":"The new ReactDOM.createRoot() API replacing ReactDOM.render()","spans":[]},{"type":"list-item","text":"Batching improvements for fewer renders","spans":[]},{"type":"list-item","text":"SSR support for <Suspense> component","spans":[]},{"type":"list-item","text":"startTransition API for non-urgent state updates","spans":[]},{"type":"paragraph","text":"To try out React 18 Alpha in your project, you can install the @alpha version from NPM or Yarn:","spans":[]},{"type":"preformatted","text":"npm install react@alpha react-dom@alpha\n# or\nyarn add react@alpha react-dom@alpha","spans":[]},{"type":"paragraph","text":"If you bootstrap your React app using a Create React App, you may encounter an error could not resolve dependency caused by react-scripts as follows:","spans":[]},{"type":"preformatted","text":"Could not resolve dependency:\npeer react@\">= 16\" from react-scripts@4.0.3","spans":[]},{"type":"paragraph","text":"You can use the --force flag so that you can update both react and react-dom libraries:","spans":[]},{"type":"preformatted","text":"npm install react@alpha react-dom@alpha --force","spans":[]},{"type":"paragraph","text":"This tutorial will help you learn the new features already present in React 18 Alpha that I’ve been able to try myself.","spans":[]},{"type":"heading1","text":"ReactDOM.createRoot() API explained","spans":[]},{"type":"paragraph","text":"The ReactDOM.createRoot() method replaces the ReactDOM.render() method that you normally use as the entry point of your React application.","spans":[]},{"type":"paragraph","text":"The method is created to prevent React 18 update from crashing your application. The new method also allows you create a production build using React 18 Alpha and compare the performance with React 17.","spans":[]},{"type":"paragraph","text":"Here’s an example of how to use the createRoot() method:","spans":[]},{"type":"preformatted","text":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';const container = document.getElementById('root');// Create a root.\nconst root = ReactDOM.createRoot(container);// Render the top component to the root.\nroot.render(<App />);","spans":[]},{"type":"paragraph","text":"When you update to React 18, an error log will appear in the console when you use .render() as your entry point, telling you to switch to the new Root API instead.","spans":[]},{"type":"paragraph","text":"You can try React 18 features only after you use the createRoot() method.","spans":[{"start":30,"end":34,"type":"strong"}]},{"type":"paragraph","text":"For more information, you can visit createRoot discussion page here.","spans":[{"start":36,"end":67,"type":"hyperlink","data":{"link_type":"Web","url":"https://github.com/reactwg/react-18/discussions/5"}}]},{"type":"heading1","text":"Automatic batching improvements for rendering","spans":[]},{"type":"paragraph","text":"As you may already know, React is a library that re-renders the UI as a result of state changes.","spans":[]},{"type":"paragraph","text":"For example, when you change the value of an arbitrary state from true to false , React should “react” by re-rendering the UI, adjusting what you see on the screen according to the code you’ve written.","spans":[]},{"type":"paragraph","text":"The following <App> component will render a black or red colored header according to the color state value:","spans":[]},{"type":"preformatted","text":"function App() {\n  const [color, setColor] = useState(false);  function handleClick() {\n    setColor((color) => !color); // react re-renders\n  }  return (\n    <div>\n      <button onClick={handleClick}>Change color</button>\n      <h1 style={{ color: color ? \"red\" : \"black\" }}>Hello</h1>\n    </div>\n  );\n}","spans":[]},{"type":"paragraph","text":"Each time the setColor() method is executed, React will immediately re-render the UI.","spans":[]},{"type":"paragraph","text":"Batching is mechanism used by React to group multiple state updates into one re-render. With batching, you will avoid unnecessary renders and optimize the rendering process","spans":[{"start":0,"end":8,"type":"strong"}]},{"type":"paragraph","text":"Getting back to the <App> component example, let’s add another state that gets updated when the handleClick() method is called:","spans":[]},{"type":"preformatted","text":"function App() {\n  const [color, setColor] = useState(false);\n  const [clickCount, setClickCount] = useState(0);\n  \n  function handleClick() {\n    setColor((color) => !color);\n    setClickCount((click) => click + 1);\n  }  return (\n    <div>\n      <button onClick={handleClick}>Change color</button>\n      <h1 style={{ color: color ? \"red\" : \"black\" }}>\n        Hello, your click count is {clickCount}\n      </h1>\n    </div>\n  );\n}","spans":[]},{"type":"paragraph","text":"Without the batching mechanism, the code above will re-render the UI twice each time the handleClick() method is called. First to update the color, then one more time to update the click count.","spans":[]},{"type":"paragraph","text":"However, the batching mechanism implemented in React 17 was not consistent. The batching won’t happen when you call the state update methods from a callback.","spans":[]},{"type":"paragraph","text":"For example, suppose you fetch data from an API first before calling the setColor() and setClickCount(). The batching mechanism won’t kick in and React will re-render the UI twice:","spans":[]},{"type":"preformatted","text":"function handleClick() {\n  fetchUserData().then(() => {\n    setCount(c => c + 1); // Causes a re-render!\n    setFlag(f => !f); // Causes a re-render!\n  });\n}function fetchUserDate(){\n  // code omitted for brevity...\n}","spans":[]},{"type":"paragraph","text":"The same thing happens when you put the state update methods inside a setTimeout() callback:","spans":[]},{"type":"preformatted","text":"function handleClick() {\n  setTimeout(() => {\n    setColor((color) => !color);\n    setClickCount((click) => click + 1);\n  }, 1000);\n}","spans":[]},{"type":"paragraph","text":"React 18 solved the problem above by improving the batching mechanism.","spans":[]},{"type":"paragraph","text":"Now the batching gets triggered when more than one state update methods are called from inside promises, setTimeout, native event handlers, or any other event that were not batched by React previously.","spans":[]},{"type":"paragraph","text":"The discussion page for this feature can be found here.","spans":[{"start":50,"end":54,"type":"hyperlink","data":{"link_type":"Web","url":"https://github.com/reactwg/react-18/discussions/21"}}]},{"type":"heading1","text":"SSR support for <Suspense>","spans":[]},{"type":"paragraph","text":"The <Suspense> component is a feature of React library that allows you to wait for some code to load by adding a fallback component to render before the code is loaded.","spans":[]},{"type":"paragraph","text":"Here’s an example of <Suspense> in action:","spans":[]},{"type":"preformatted","text":"<Suspense fallback={<LoadingSpinner />}>\n  <UserProfile />\n<Suspense />","spans":[]},{"type":"paragraph","text":"You can read about <Suspense> in depth from React documentation.","spans":[]},{"type":"paragraph","text":"In React 18, the <Suspense> feature is supported even when you render your components on the server using SSR. This update allows you to wrap server rendered components inside a <Suspense> component.","spans":[]},{"type":"paragraph","text":"Any server side components wrapped inside <Suspense> will be streamed as HTML using the fallback component first, and once the component is ready, React will send new bits of HTML to replace the fallback component.","spans":[]},{"type":"paragraph","text":"For example, suppose you have an <Article> and a <Comments> components as follows:","spans":[]},{"type":"preformatted","text":"<Layout>\n  <Article />\n  <Suspense fallback={<Spinner />}>\n    <Comments />\n  </Suspense>\n</Layout>","spans":[]},{"type":"paragraph","text":"When rendered from the server, the <Article> component will be prioritized and the <Comments> component will be replaced by the fallback component <Spinner> . Once the <Comments> component is rendered on the server, React will send it to the browser, replacing the <Spinner> component.","spans":[]},{"type":"paragraph","text":"For a deeper explanation on SSR and Suspense, you can visit the following GitHub discussion page.","spans":[{"start":74,"end":91,"type":"hyperlink","data":{"link_type":"Web","url":"https://github.com/reactwg/react-18/discussions/37"}}]},{"type":"heading1","text":"The startTransition API for non-urgent state updates","spans":[]},{"type":"paragraph","text":"The startTransition API is a new feature in React 18 designed to help your application stay responsive during state update that requires heavy computation power to render the UI.","spans":[]},{"type":"paragraph","text":"One example of such update is when you create an input box that filters a list of data. The state update requires your React app to compute and display only data that matches the filter.","spans":[]},{"type":"paragraph","text":"You may have two state update methods: one to handle the input value change and the other to handle the filter query.","spans":[]},{"type":"preformatted","text":"// Set the input value state\nsetInputValue(input);\n\n// Set the search query input. Reflected later on the UI\nsetSearchQuery(input);","spans":[]},{"type":"paragraph","text":"When the amount of elements to filter increases, the computation to filter the elements are also increased. This can cause your app to be sluggish or even freeze while the computation is being done.","spans":[{"start":138,"end":161,"type":"em"}]},{"type":"paragraph","text":"To mitigate this issue, React allows you to mark certain updates as transitions.","spans":[{"start":68,"end":79,"type":"strong"},{"start":79,"end":80,"type":"em"}]},{"type":"paragraph","text":"Transition updates are handled as non-urgent updates, allowing React to prioritize on urgent updates first.","spans":[]},{"type":"paragraph","text":"Back to the example, the update to the search query may be delayed by wrapping it inside the startTransition API as follows:","spans":[]},{"type":"preformatted","text":"import { startTransition } from 'react';// Urgent: Show what was typed\nsetInputValue(input);// Mark any state updates inside as transitions\nstartTransition(() => {\n  setSearchQuery(input);\n});","spans":[]},{"type":"paragraph","text":"The updates wrapped in startTransition will be interrupted when more important updates are triggered.","spans":[]},{"type":"paragraph","text":"In the above example, the transition update for the search query will be stopped when the user types multiple multiple characters in a row. This optimizes React re-render performance and removes unnecessary computation for stale updates.","spans":[]},{"type":"paragraph","text":"You can find more information on startTransition API here.","spans":[{"start":33,"end":57,"type":"hyperlink","data":{"link_type":"Web","url":"https://github.com/reactwg/react-18/discussions/41"}}]},{"type":"heading1","text":"Conclusion","spans":[]},{"type":"paragraph","text":"While several features mentioned in React 18 introduction page hasn’t even been released yet (useDeferredValue and <SuspenseList> for example)","spans":[{"start":36,"end":57,"type":"hyperlink","data":{"link_type":"Web","url":"https://github.com/reactwg/react-18/discussions/4"}}]},{"type":"paragraph","text":"React 18 Alpha already brings several interesting features to React that improves the concurrency power of the library. You can try it by installing the @alpha build of react and react-dom library.","spans":[]},{"type":"paragraph","text":"There’s also no update on React Server Components yet, but the new concurrent features like SSR support for Suspense and streaming HTML from the server may help in implementing Server Components later.","spans":[{"start":26,"end":49,"type":"hyperlink","data":{"link_type":"Web","url":"https://blog.bitsrc.io/react-server-components-1ca621ac2519"}}]},{"type":"paragraph","text":"The release timeline for React 18 is as follows:","spans":[{"start":4,"end":33,"type":"hyperlink","data":{"link_type":"Web","url":"https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html"}}]},{"type":"list-item","text":"Alpha version to gather feedback and offer support for React Working group (Available today)","spans":[]},{"type":"list-item","text":"Public Beta for everyone else to try (at least several months after Alpha version release)","spans":[]},{"type":"list-item","text":"Release Candidate (RC) build several weeks after the public beta version","spans":[]},{"type":"list-item","text":"The stable release will be several weeks after RC","spans":[]},{"type":"paragraph","text":"Thank you for reading this article. Feel free to try out React 18 yourself, but be warned that there may be breaking changes depending on how complex your React application is.","spans":[]}],"text":"The notable features you can already try in React 18 are as follows: The new ReactDOM.createRoot() API replacing ReactDOM.render() Batching improvements for fewer renders SSR support for <Suspense> component startTransition API for non-urgent state updates To try out React 18 Alpha in your project, you can install the @alpha version from NPM or Yarn: npm install react@alpha react-dom@alpha\n# or\nyarn add react@alpha react-dom@alpha If you bootstrap your React app using a Create React App, you may encounter an error could not resolve dependency caused by react-scripts as follows: Could not resolve dependency:\npeer react@\">= 16\" from react-scripts@4.0.3 You can use the --force flag so that you can update both react and react-dom libraries: npm install react@alpha react-dom@alpha --force This tutorial will help you learn the new features already present in React 18 Alpha that I’ve been able to try myself. ReactDOM.createRoot() API explained The ReactDOM.createRoot() method replaces the ReactDOM.render() method that you normally use as the entry point of your React application. The method is created to prevent React 18 update from crashing your application. The new method also allows you create a production build using React 18 Alpha and compare the performance with React 17. Here’s an example of how to use the createRoot() method: import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';const container = document.getElementById('root');// Create a root.\nconst root = ReactDOM.createRoot(container);// Render the top component to the root.\nroot.render(<App />); When you update to React 18, an error log will appear in the console when you use .render() as your entry point, telling you to switch to the new Root API instead. You can try React 18 features only after you use the createRoot() method. For more information, you can visit createRoot discussion page here. Automatic batching improvements for rendering As you may already know, React is a library that re-renders the UI as a result of state changes. For example, when you change the value of an arbitrary state from true to false , React should “react” by re-rendering the UI, adjusting what you see on the screen according to the code you’ve written. The following <App> component will render a black or red colored header according to the color state value: function App() {\n  const [color, setColor] = useState(false);  function handleClick() {\n    setColor((color) => !color); // react re-renders\n  }  return (\n    <div>\n      <button onClick={handleClick}>Change color</button>\n      <h1 style={{ color: color ? \"red\" : \"black\" }}>Hello</h1>\n    </div>\n  );\n} Each time the setColor() method is executed, React will immediately re-render the UI. Batching is mechanism used by React to group multiple state updates into one re-render. With batching, you will avoid unnecessary renders and optimize the rendering process Getting back to the <App> component example, let’s add another state that gets updated when the handleClick() method is called: function App() {\n  const [color, setColor] = useState(false);\n  const [clickCount, setClickCount] = useState(0);\n  \n  function handleClick() {\n    setColor((color) => !color);\n    setClickCount((click) => click + 1);\n  }  return (\n    <div>\n      <button onClick={handleClick}>Change color</button>\n      <h1 style={{ color: color ? \"red\" : \"black\" }}>\n        Hello, your click count is {clickCount}\n      </h1>\n    </div>\n  );\n} Without the batching mechanism, the code above will re-render the UI twice each time the handleClick() method is called. First to update the color, then one more time to update the click count. However, the batching mechanism implemented in React 17 was not consistent. The batching won’t happen when you call the state update methods from a callback. For example, suppose you fetch data from an API first before calling the setColor() and setClickCount(). The batching mechanism won’t kick in and React will re-render the UI twice: function handleClick() {\n  fetchUserData().then(() => {\n    setCount(c => c + 1); // Causes a re-render!\n    setFlag(f => !f); // Causes a re-render!\n  });\n}function fetchUserDate(){\n  // code omitted for brevity...\n} The same thing happens when you put the state update methods inside a setTimeout() callback: function handleClick() {\n  setTimeout(() => {\n    setColor((color) => !color);\n    setClickCount((click) => click + 1);\n  }, 1000);\n} React 18 solved the problem above by improving the batching mechanism. Now the batching gets triggered when more than one state update methods are called from inside promises, setTimeout, native event handlers, or any other event that were not batched by React previously. The discussion page for this feature can be found here. SSR support for <Suspense> The <Suspense> component is a feature of React library that allows you to wait for some code to load by adding a fallback component to render before the code is loaded. Here’s an example of <Suspense> in action: <Suspense fallback={<LoadingSpinner />}>\n  <UserProfile />\n<Suspense /> You can read about <Suspense> in depth from React documentation. In React 18, the <Suspense> feature is supported even when you render your components on the server using SSR. This update allows you to wrap server rendered components inside a <Suspense> component. Any server side components wrapped inside <Suspense> will be streamed as HTML using the fallback component first, and once the component is ready, React will send new bits of HTML to replace the fallback component. For example, suppose you have an <Article> and a <Comments> components as follows: <Layout>\n  <Article />\n  <Suspense fallback={<Spinner />}>\n    <Comments />\n  </Suspense>\n</Layout> When rendered from the server, the <Article> component will be prioritized and the <Comments> component will be replaced by the fallback component <Spinner> . Once the <Comments> component is rendered on the server, React will send it to the browser, replacing the <Spinner> component. For a deeper explanation on SSR and Suspense, you can visit the following GitHub discussion page. The startTransition API for non-urgent state updates The startTransition API is a new feature in React 18 designed to help your application stay responsive during state update that requires heavy computation power to render the UI. One example of such update is when you create an input box that filters a list of data. The state update requires your React app to compute and display only data that matches the filter. You may have two state update methods: one to handle the input value change and the other to handle the filter query. // Set the input value state\nsetInputValue(input);\n\n// Set the search query input. Reflected later on the UI\nsetSearchQuery(input); When the amount of elements to filter increases, the computation to filter the elements are also increased. This can cause your app to be sluggish or even freeze while the computation is being done. To mitigate this issue, React allows you to mark certain updates as transitions. Transition updates are handled as non-urgent updates, allowing React to prioritize on urgent updates first. Back to the example, the update to the search query may be delayed by wrapping it inside the startTransition API as follows: import { startTransition } from 'react';// Urgent: Show what was typed\nsetInputValue(input);// Mark any state updates inside as transitions\nstartTransition(() => {\n  setSearchQuery(input);\n}); The updates wrapped in startTransition will be interrupted when more important updates are triggered. In the above example, the transition update for the search query will be stopped when the user types multiple multiple characters in a row. This optimizes React re-render performance and removes unnecessary computation for stale updates. You can find more information on startTransition API here. Conclusion While several features mentioned in React 18 introduction page hasn’t even been released yet (useDeferredValue and <SuspenseList> for example) React 18 Alpha already brings several interesting features to React that improves the concurrency power of the library. You can try it by installing the @alpha build of react and react-dom library. There’s also no update on React Server Components yet, but the new concurrent features like SSR support for Suspense and streaming HTML from the server may help in implementing Server Components later. The release timeline for React 18 is as follows: Alpha version to gather feedback and offer support for React Working group (Available today) Public Beta for everyone else to try (at least several months after Alpha version release) Release Candidate (RC) build several weeks after the public beta version The stable release will be several weeks after RC Thank you for reading this article. Feel free to try out React 18 yourself, but be warned that there may be breaking changes depending on how complex your React application is."},"date":null,"item_image":{"url":"https://images.prismic.io/multilang-prismic-gatsby-example/ff96898c-e2e8-4964-8d75-c53fdd74ee04_1_ZVFiavGnNXNIhQwuhMHUgQ.png?auto=compress%2Cformat"},"short_description":{"html":"<p>The React Team has recently released a new <a  href=\"https://github.com/reactwg/react-18/discussions/4\">alpha version of React 18</a>. The main addition to this new version is concurrent features that improve the performance of your React application.</p>","raw":[{"type":"paragraph","text":"The React Team has recently released a new alpha version of React 18. The main addition to this new version is concurrent features that improve the performance of your React application.","spans":[{"start":43,"end":68,"type":"hyperlink","data":{"link_type":"Web","url":"https://github.com/reactwg/react-18/discussions/4"}}]}],"text":"The React Team has recently released a new alpha version of React 18. The main addition to this new version is concurrent features that improve the performance of your React application."}}],"slice_label":null,"slice_type":"blog","primary":{"blog_title":{"html":"<h1>My blog</h1>","raw":[{"type":"heading1","text":"My blog","spans":[]}],"text":"My blog"}}}]}},"prismicTopMenu":{"type":"top_menu","lang":"en-us","data":{"menu_links":[{"label":{"raw":[{"type":"paragraph","text":"Homepage","spans":[]}],"html":"<p>Homepage</p>","text":"Homepage"},"link":{"id":"Xs5M1hEAACEAImP9","url":"/"}},{"label":{"raw":[{"type":"paragraph","text":"About me","spans":[]}],"html":"<p>About me</p>","text":"About me"},"link":{"id":"Xs5rBhEAACEAIueu","url":"/page/about-me"}},{"label":{"raw":[{"type":"paragraph","text":"My projects","spans":[]}],"html":"<p>My projects</p>","text":"My projects"},"link":{"id":"YMDFHhEAACMA043w","url":"/page/my-projects"}},{"label":{"raw":[{"type":"paragraph","text":"Blog","spans":[]}],"html":"<p>Blog</p>","text":"Blog"},"link":{"id":"YMIl-BEAACIA2XBL","url":"/page/blog-page"}},{"label":{"raw":[{"type":"paragraph","text":"MetaMask","spans":[]}],"html":"<p>MetaMask</p>","text":"MetaMask"},"link":{"id":"YMM2oREAACMA3jPr","url":"/page/metamask"}}]}}},"pageContext":{"id":"7c365c11-e757-51c1-b510-1061a7ea124c","uid":"blog-page","lang":"en-us","type":"page","url":"/page/blog-page"}},"staticQueryHashes":["4160633550"]}