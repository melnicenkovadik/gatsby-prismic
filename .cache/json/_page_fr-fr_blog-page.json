{"data":{"prismicPage":{"url":"/page/fr-fr/blog-page","uid":"blog-page","type":"page","id":"f811743b-1e0a-5271-bb00-a34f16d6e432","lang":"fr-fr","alternate_languages":[{"id":"YMIl-BEAACIA2XBL","type":"page","lang":"en-us","uid":"blog-page","url":"/page/blog-page"},{"id":"YMImKhEAACUA2XEN","type":"page","lang":"ru","uid":"blog-page","url":"/page/ru/blog-page"}],"data":{"body":[{"id":"c3bac877-e1fe-5fa4-83b4-b8d76a876be6","items":[{"blog_item_title":{"html":"<h3>Sony a officiellement dévoilé le ron Airpeak S1 à 9000 $ (sans caméra)</h3>","raw":[{"type":"heading3","text":"Sony a officiellement dévoilé le ron Airpeak S1 à 9000 $ (sans caméra)","spans":[]}],"text":"Sony a officiellement dévoilé le ron Airpeak S1 à 9000 $ (sans caméra)"},"content":{"html":"<p>L&#39;Association des constructeurs automobiles ukrainiens Ukravtoprom a résumé les résultats du marché automobile local pour les cinq premiers mois de cette année, révélant les nouveaux modèles les plus populaires. Au cours de cette période, les Ukrainiens ont acheté près de 40 000 voitures neuves (39,6 000).</p>\n    <div data-oembed=\"https://youtu.be/7CZTLogln34\"\n      data-oembed-type=\"video\"\n      data-oembed-provider=\"YouTube\"\n      >\n\n      <iframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/7CZTLogln34?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n    </div>\n  <p>La plus grande demande de cette période était la voiture Toyota RAV4, de janvier à mai, ce modèle a été acheté par 2586 automobilistes. Le deuxième plus populaire était le crossover compact coréen Kia Sportage, pour lequel 2 235 acheteurs ont voté avec leur portefeuille. Ferme le top trois Renault Duster, à l&#39;actif de ce modèle 2110 immatriculations.</p><p></p><p></p>\n    <p class=\" block-img\">\n      <img src=\"https://images.prismic.io/multilang-prismic-gatsby-example/ede3bd54-2b76-4779-a4bb-df5409cc667e_foto-2-2-5.jpg?auto=compress,format\" alt=\"car\" copyright=\"\">\n    </p>\n  <ol><li>Toyota RAV4 - 2586 т.</li><li> Kia Sportage - 2235 т.</li><li>  Renault Duster - 2110 pièces</li><li>  Renault Sandero - 1207 pièces  </li><li>Renault Logan - 1134 pièces  </li><li>Nissan Qashqai - 1117 pièces </li><li> Volkswagen Touareg - 966 pièces</li><li>  Hyundai Tucson - 877 т. </li><li> Toyota Land Cruiser Prado - 846 т. </li><li> Mazda CX5 - 823 т.</li></ol><p>Ainsi, 9 des 10 voitures les plus populaires sur le marché ukrainien sont des crossovers. Au total, selon les résultats des cinq premiers mois de cette année, les crossovers détiennent les 3/4 du marché ukrainien des voitures neuves.</p><p>Il convient de noter qu&#39;en mai seulement, les Ukrainiens ont acheté 8,5 mille voitures neuves, 33,2 mille voitures étrangères d&#39;occasion et 622 voitures électriques.<br /></p>","raw":[{"type":"paragraph","text":"L'Association des constructeurs automobiles ukrainiens Ukravtoprom a résumé les résultats du marché automobile local pour les cinq premiers mois de cette année, révélant les nouveaux modèles les plus populaires. Au cours de cette période, les Ukrainiens ont acheté près de 40 000 voitures neuves (39,6 000).","spans":[]},{"type":"embed","oembed":{"height":113,"width":200,"embed_url":"https://youtu.be/7CZTLogln34","type":"video","version":"1.0","title":"Starship | SN15 | Flight Test Recap","author_name":"SpaceX","author_url":"https://www.youtube.com/c/SpaceX","provider_name":"YouTube","provider_url":"https://www.youtube.com/","cache_age":null,"thumbnail_url":"https://i.ytimg.com/vi/7CZTLogln34/hqdefault.jpg","thumbnail_width":480,"thumbnail_height":360,"html":"<iframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/7CZTLogln34?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"}},{"type":"paragraph","text":"La plus grande demande de cette période était la voiture Toyota RAV4, de janvier à mai, ce modèle a été acheté par 2586 automobilistes. Le deuxième plus populaire était le crossover compact coréen Kia Sportage, pour lequel 2 235 acheteurs ont voté avec leur portefeuille. Ferme le top trois Renault Duster, à l'actif de ce modèle 2110 immatriculations.","spans":[]},{"type":"paragraph","text":"","spans":[]},{"type":"paragraph","text":"","spans":[]},{"type":"image","url":"https://images.prismic.io/multilang-prismic-gatsby-example/ede3bd54-2b76-4779-a4bb-df5409cc667e_foto-2-2-5.jpg?auto=compress,format","alt":"car","copyright":null,"dimensions":{"width":1200,"height":900}},{"type":"o-list-item","text":"Toyota RAV4 - 2586 т.","spans":[]},{"type":"o-list-item","text":" Kia Sportage - 2235 т.","spans":[]},{"type":"o-list-item","text":"  Renault Duster - 2110 pièces","spans":[]},{"type":"o-list-item","text":"  Renault Sandero - 1207 pièces  ","spans":[]},{"type":"o-list-item","text":"Renault Logan - 1134 pièces  ","spans":[]},{"type":"o-list-item","text":"Nissan Qashqai - 1117 pièces ","spans":[]},{"type":"o-list-item","text":" Volkswagen Touareg - 966 pièces","spans":[]},{"type":"o-list-item","text":"  Hyundai Tucson - 877 т. ","spans":[]},{"type":"o-list-item","text":" Toyota Land Cruiser Prado - 846 т. ","spans":[]},{"type":"o-list-item","text":" Mazda CX5 - 823 т.","spans":[]},{"type":"paragraph","text":"Ainsi, 9 des 10 voitures les plus populaires sur le marché ukrainien sont des crossovers. Au total, selon les résultats des cinq premiers mois de cette année, les crossovers détiennent les 3/4 du marché ukrainien des voitures neuves.","spans":[]},{"type":"paragraph","text":"Il convient de noter qu'en mai seulement, les Ukrainiens ont acheté 8,5 mille voitures neuves, 33,2 mille voitures étrangères d'occasion et 622 voitures électriques.\n","spans":[]}],"text":"L'Association des constructeurs automobiles ukrainiens Ukravtoprom a résumé les résultats du marché automobile local pour les cinq premiers mois de cette année, révélant les nouveaux modèles les plus populaires. Au cours de cette période, les Ukrainiens ont acheté près de 40 000 voitures neuves (39,6 000).  La plus grande demande de cette période était la voiture Toyota RAV4, de janvier à mai, ce modèle a été acheté par 2586 automobilistes. Le deuxième plus populaire était le crossover compact coréen Kia Sportage, pour lequel 2 235 acheteurs ont voté avec leur portefeuille. Ferme le top trois Renault Duster, à l'actif de ce modèle 2110 immatriculations.    Toyota RAV4 - 2586 т.  Kia Sportage - 2235 т.   Renault Duster - 2110 pièces   Renault Sandero - 1207 pièces   Renault Logan - 1134 pièces   Nissan Qashqai - 1117 pièces   Volkswagen Touareg - 966 pièces   Hyundai Tucson - 877 т.   Toyota Land Cruiser Prado - 846 т.   Mazda CX5 - 823 т. Ainsi, 9 des 10 voitures les plus populaires sur le marché ukrainien sont des crossovers. Au total, selon les résultats des cinq premiers mois de cette année, les crossovers détiennent les 3/4 du marché ukrainien des voitures neuves. Il convient de noter qu'en mai seulement, les Ukrainiens ont acheté 8,5 mille voitures neuves, 33,2 mille voitures étrangères d'occasion et 622 voitures électriques.\n"},"date":"2021-06-10","item_image":{"url":"https://images.prismic.io/slicemachine-blank/6b2bf485-aa12-44ef-8f06-dce6b91b9309_dancing.png?auto=compress%2Cformat"},"short_description":{"html":"<p>L&#39;Association des constructeurs automobiles ukrainiens Ukravtoprom a résumé les résultats du marché automobile local pour les cinq premiers mois de cette année, révélant les nouveaux modèles les plus populaires. Au cours de cette période, les Ukrainiens ont acheté près de 40 000 voitures neuves (39,6 000).</p>","raw":[{"type":"paragraph","text":"L'Association des constructeurs automobiles ukrainiens Ukravtoprom a résumé les résultats du marché automobile local pour les cinq premiers mois de cette année, révélant les nouveaux modèles les plus populaires. Au cours de cette période, les Ukrainiens ont acheté près de 40 000 voitures neuves (39,6 000).","spans":[]}],"text":"L'Association des constructeurs automobiles ukrainiens Ukravtoprom a résumé les résultats du marché automobile local pour les cinq premiers mois de cette année, révélant les nouveaux modèles les plus populaires. Au cours de cette période, les Ukrainiens ont acheté près de 40 000 voitures neuves (39,6 000)."}},{"blog_item_title":{"html":"<h3>SpaceX établit un record - vise 20 lancements de Falcon 9 au premier semestre 2021</h3>","raw":[{"type":"heading3","text":"SpaceX établit un record - vise 20 lancements de Falcon 9 au premier semestre 2021","spans":[]}],"text":"SpaceX établit un record - vise 20 lancements de Falcon 9 au premier semestre 2021"},"content":{"html":"\n    <p class=\" block-img\">\n      <img src=\"https://images.prismic.io/multilang-prismic-gatsby-example/05e8e11d-7d5a-4467-a9a1-e1406ef1abf3_e3svv47xiaapuma.jpg?auto=compress,format\" alt=\"\" copyright=\"\">\n    </p>\n  <p>Au cours de la première semaine de juin, SpaceX a lancé deux lancements réussis de Falcon 9 : le 3 juin, il a lancé un camion Dragon 2 avec la 22e mission de ravitaillement de l&#39;ISS, et le 6 juin, il a lancé un satellite de télécommunications SXM-8 de 7 tonnes pour soutenir diffusion en continu pour SiriusXM. . Et le programme de ce mois-ci comprend deux autres lancements de Falcon 9.</p><p>Le prochain lancement est prévu pour le 17 juin - il s&#39;agira d&#39;une mission en orbite autour du GPS III-05 (Neil Armstrong) pour les forces spatiales américaines. Et pour la première fois, l&#39;envoi de marchandises &quot;sécurité nationale&quot; dans le cadre du contrat avec l&#39;armée américaine sera utilisé non pas un tout nouveau, mais un premier étage restauré - F9 B5 B1062.2 (elle était responsable de l&#39;envoi du précédent GPS III-04 en novembre 2020). Auparavant, la société d&#39;Ilona Maska avait remporté un appel d&#39;offres pour lancer cinq des six premiers appareils de ce type. Et si tout se passe bien, à l&#39;avenir SpaceX sera autorisé à utiliser le Falcon 9 B1062 pour la troisième fois pour lancer le satellite GPS III SV06 (quatrième trimestre 2021 ou début 2022).</p><p>Exactement une semaine après le GPS III-05, SpaceX prévoit de lancer un autre Falcon 9 avec la mission Transporter-2 - ce sera le deuxième lancement du programme SmallSat Rideshare. Oui, nous parlons des très &quot;minibus spatiaux&quot; SpaceX, dans lesquels la société envoie des dizaines de petits satellites pour différents clients. La dernière fois que la société a établi un record du monde en envoyant 143 satellites en orbite à la fois.</p><p>SpaceX établit un nouveau record du monde - La fusée Falcon 9 lance 143 satellites à la fois</p><p>Si tout se passe comme prévu, juin 2021 sera le troisième mois de l&#39;histoire de SpaceX avec quatre lancements réussis. Jusqu&#39;à présent, SpaceX n&#39;a ​​pas lancé plus de quatre Falcon 9 par mois. Les quatre lancements de juin sont payés par des clients tiers, ce qui aura un impact positif sur la balance des paiements de la société, qui, au cours des six derniers mois, a principalement lancé des satellites Internet Starlink dans son propre intérêt. Plus important encore, SpaceX achèvera le premier semestre 2021 avec un record de 20 missions réussies et pourra atteindre un nombre impressionnant de 40 lancements d&#39;ici la fin de l&#39;année au rythme actuel.</p>","raw":[{"type":"image","url":"https://images.prismic.io/multilang-prismic-gatsby-example/05e8e11d-7d5a-4467-a9a1-e1406ef1abf3_e3svv47xiaapuma.jpg?auto=compress,format","alt":null,"copyright":null,"dimensions":{"width":1200,"height":800}},{"type":"paragraph","text":"Au cours de la première semaine de juin, SpaceX a lancé deux lancements réussis de Falcon 9 : le 3 juin, il a lancé un camion Dragon 2 avec la 22e mission de ravitaillement de l'ISS, et le 6 juin, il a lancé un satellite de télécommunications SXM-8 de 7 tonnes pour soutenir diffusion en continu pour SiriusXM. . Et le programme de ce mois-ci comprend deux autres lancements de Falcon 9.","spans":[]},{"type":"paragraph","text":"Le prochain lancement est prévu pour le 17 juin - il s'agira d'une mission en orbite autour du GPS III-05 (Neil Armstrong) pour les forces spatiales américaines. Et pour la première fois, l'envoi de marchandises \"sécurité nationale\" dans le cadre du contrat avec l'armée américaine sera utilisé non pas un tout nouveau, mais un premier étage restauré - F9 B5 B1062.2 (elle était responsable de l'envoi du précédent GPS III-04 en novembre 2020). Auparavant, la société d'Ilona Maska avait remporté un appel d'offres pour lancer cinq des six premiers appareils de ce type. Et si tout se passe bien, à l'avenir SpaceX sera autorisé à utiliser le Falcon 9 B1062 pour la troisième fois pour lancer le satellite GPS III SV06 (quatrième trimestre 2021 ou début 2022).","spans":[]},{"type":"paragraph","text":"Exactement une semaine après le GPS III-05, SpaceX prévoit de lancer un autre Falcon 9 avec la mission Transporter-2 - ce sera le deuxième lancement du programme SmallSat Rideshare. Oui, nous parlons des très \"minibus spatiaux\" SpaceX, dans lesquels la société envoie des dizaines de petits satellites pour différents clients. La dernière fois que la société a établi un record du monde en envoyant 143 satellites en orbite à la fois.","spans":[]},{"type":"paragraph","text":"SpaceX établit un nouveau record du monde - La fusée Falcon 9 lance 143 satellites à la fois","spans":[]},{"type":"paragraph","text":"Si tout se passe comme prévu, juin 2021 sera le troisième mois de l'histoire de SpaceX avec quatre lancements réussis. Jusqu'à présent, SpaceX n'a ​​pas lancé plus de quatre Falcon 9 par mois. Les quatre lancements de juin sont payés par des clients tiers, ce qui aura un impact positif sur la balance des paiements de la société, qui, au cours des six derniers mois, a principalement lancé des satellites Internet Starlink dans son propre intérêt. Plus important encore, SpaceX achèvera le premier semestre 2021 avec un record de 20 missions réussies et pourra atteindre un nombre impressionnant de 40 lancements d'ici la fin de l'année au rythme actuel.","spans":[]}],"text":" Au cours de la première semaine de juin, SpaceX a lancé deux lancements réussis de Falcon 9 : le 3 juin, il a lancé un camion Dragon 2 avec la 22e mission de ravitaillement de l'ISS, et le 6 juin, il a lancé un satellite de télécommunications SXM-8 de 7 tonnes pour soutenir diffusion en continu pour SiriusXM. . Et le programme de ce mois-ci comprend deux autres lancements de Falcon 9. Le prochain lancement est prévu pour le 17 juin - il s'agira d'une mission en orbite autour du GPS III-05 (Neil Armstrong) pour les forces spatiales américaines. Et pour la première fois, l'envoi de marchandises \"sécurité nationale\" dans le cadre du contrat avec l'armée américaine sera utilisé non pas un tout nouveau, mais un premier étage restauré - F9 B5 B1062.2 (elle était responsable de l'envoi du précédent GPS III-04 en novembre 2020). Auparavant, la société d'Ilona Maska avait remporté un appel d'offres pour lancer cinq des six premiers appareils de ce type. Et si tout se passe bien, à l'avenir SpaceX sera autorisé à utiliser le Falcon 9 B1062 pour la troisième fois pour lancer le satellite GPS III SV06 (quatrième trimestre 2021 ou début 2022). Exactement une semaine après le GPS III-05, SpaceX prévoit de lancer un autre Falcon 9 avec la mission Transporter-2 - ce sera le deuxième lancement du programme SmallSat Rideshare. Oui, nous parlons des très \"minibus spatiaux\" SpaceX, dans lesquels la société envoie des dizaines de petits satellites pour différents clients. La dernière fois que la société a établi un record du monde en envoyant 143 satellites en orbite à la fois. SpaceX établit un nouveau record du monde - La fusée Falcon 9 lance 143 satellites à la fois Si tout se passe comme prévu, juin 2021 sera le troisième mois de l'histoire de SpaceX avec quatre lancements réussis. Jusqu'à présent, SpaceX n'a ​​pas lancé plus de quatre Falcon 9 par mois. Les quatre lancements de juin sont payés par des clients tiers, ce qui aura un impact positif sur la balance des paiements de la société, qui, au cours des six derniers mois, a principalement lancé des satellites Internet Starlink dans son propre intérêt. Plus important encore, SpaceX achèvera le premier semestre 2021 avec un record de 20 missions réussies et pourra atteindre un nombre impressionnant de 40 lancements d'ici la fin de l'année au rythme actuel."},"date":"2021-06-10","item_image":{"url":"https://images.prismic.io/slicemachine-blank/76bc1e6e-67a0-41d9-9c3c-5a5d3161e6a9_bikini.png?auto=compress%2Cformat"},"short_description":{"html":"<p>Au cours de la première semaine de juin, SpaceX a lancé deux lancements réussis de Falcon 9 : le 3 juin, il a lancé un camion Dragon 2 avec la 22e mission de ravitaillement de l&#39;ISS, et le 6 juin, il a lancé un satellite de télécommunications SXM-8 de 7 tonnes pour soutenir diffusion en continu pour SiriusXM. . Et le programme de ce mois-ci comprend deux autres lancements de Falcon 9.</p><p></p>","raw":[{"type":"paragraph","text":"Au cours de la première semaine de juin, SpaceX a lancé deux lancements réussis de Falcon 9 : le 3 juin, il a lancé un camion Dragon 2 avec la 22e mission de ravitaillement de l'ISS, et le 6 juin, il a lancé un satellite de télécommunications SXM-8 de 7 tonnes pour soutenir diffusion en continu pour SiriusXM. . Et le programme de ce mois-ci comprend deux autres lancements de Falcon 9.","spans":[]},{"type":"paragraph","text":"","spans":[]}],"text":"Au cours de la première semaine de juin, SpaceX a lancé deux lancements réussis de Falcon 9 : le 3 juin, il a lancé un camion Dragon 2 avec la 22e mission de ravitaillement de l'ISS, et le 6 juin, il a lancé un satellite de télécommunications SXM-8 de 7 tonnes pour soutenir diffusion en continu pour SiriusXM. . Et le programme de ce mois-ci comprend deux autres lancements de Falcon 9. "}},{"blog_item_title":{"html":"<h3>Essayer la version alpha de React 18</h3>","raw":[{"type":"heading3","text":"Essayer la version alpha de React 18","spans":[]}],"text":"Essayer la version alpha de React 18"},"content":{"html":"<h1></h1><p>Les fonctionnalités notables que vous pouvez déjà essayer dans React 18 sont les suivantes :</p><ul><li>La nouvelle ReactDOM.createRoot()API remplaçantReactDOM.render()</li><li>Améliorations des lots pour moins de rendus</li><li>Prise en charge SSR pour le &lt;Suspense&gt;composant</li><li>startTransition API pour les mises à jour d&#39;état non urgentes</li></ul><p>Pour essayer React 18 Alpha dans votre projet, vous pouvez installer la @alphaversion depuis NPM ou Yarn :</p><pre>npm install react@alpha react-dom@alpha \n# ou \nwire add react@alpha react-dom@alpha</pre><p>Si vous démarrez votre application React à l&#39;aide d&#39;une application Create React, vous pouvez rencontrer une erreur could not resolve dependencycausée par ce react-scriptsqui suit :</p><pre>Impossible de résoudre la dépendance : \npeer react@&quot;&gt;= 16&quot; de react-scripts@4.0.3</pre><p>Vous pouvez utiliser le --forcedrapeau pour pouvoir mettre à jour à la fois reactet les react-dombibliothèques :</p><pre>npm install react@alpha react-dom@alpha --force</pre><p>Ce tutoriel vous aidera à apprendre les nouvelles fonctionnalités déjà présentes dans React 18 Alpha que j&#39;ai pu essayer moi-même.</p><h1>API ReactDOM.createRoot() expliquée</h1><p>La ReactDOM.createRoot()méthode remplace la ReactDOM.render()méthode que vous utilisez normalement comme point d&#39;entrée de votre application React.</p><p>La méthode est créée pour empêcher la mise à jour de React 18 de planter votre application. La nouvelle méthode vous permet également de créer une version de production à l&#39;aide de React 18 Alpha et de comparer les performances avec React 17.</p><p>Voici un exemple d&#39;utilisation de la createRoot()méthode :</p><pre>importer React à partir de « react » ; \nimporter ReactDOM depuis &#39;react-dom&#39; ; \nimporter l&#39;application depuis &#39;./App&#39; ;const conteneur = document.getElementById(&#39;root&#39;);// Créer une racine. \nconst root = ReactDOM.createRoot(conteneur);// Rendu du composant supérieur à la racine. \nroot.render(&lt;App /&gt;);</pre><p>Lorsque vous effectuez la mise à jour vers React 18, un journal des erreurs apparaît dans la console lorsque vous l&#39;utilisez .render()comme point d&#39;entrée, vous indiquant de passer à la nouvelle API racine à la place.</p><p>Vous ne pouvez essayer les fonctionnalités de React 18 <strong>qu&#39;après</strong> avoir utilisé la createRoot()méthode.</p><p>Pour plus d&#39;informations, vous pouvez visiter la <a  href=\"https://github.com/reactwg/react-18/discussions/5\">page de discussion createRoot ici</a> .</p><h1>Améliorations automatiques du traitement par lots pour le rendu</h1><p>Comme vous le savez peut-être déjà, React est une bibliothèque qui restitue l&#39;interface utilisateur à la suite de changements d&#39;état.</p><p>Par exemple, lorsque vous modifiez la valeur d&#39;un état arbitraire de trueà false, React doit « réagir » en restituant l&#39;interface utilisateur, en ajustant ce que vous voyez à l&#39;écran en fonction du code que vous avez écrit.</p><p>Le &lt;App&gt;composant suivant affichera un en-tête de couleur noire ou rouge en fonction de la colorvaleur d&#39;état :</p><pre>function App() { \n  const [color, setColor] = useState(false);  function handleClick() { \n    setColor((couleur) =&gt; !couleur); // réagir aux re-rendus \n  }  return ( \n    &lt;div&gt; \n      &lt;button onClick={handleClick}&gt;Changer de couleur&lt;/button&gt; \n      &lt;h1 style={{ color: color ? &quot;red&quot; : &quot;black&quot; }}&gt;Bonjour&lt;/h1&gt; \n    &lt;/div&gt; \n  ); \n}</pre><p>Chaque fois que la setColor()méthode est exécutée, React restituera immédiatement l&#39;interface utilisateur.</p><p><strong>Le traitement par lots</strong> est un mécanisme utilisé par React pour regrouper plusieurs mises à jour d&#39;état en un seul rendu. Avec le batching, vous éviterez les rendus inutiles et optimiserez le processus de rendu</p><p>Pour en revenir à l&#39; &lt;App&gt;exemple de composant, ajoutons un autre état qui est mis à jour lorsque la handleClick()méthode est appelée :</p><pre>function App() { \n  const [color, setColor] = useState(false); \n  const [clickCount, setClickCount] = useState(0); \n  \n  function handleClick() { \n    setColor((couleur) =&gt; !couleur); \n    setClickCount((clic) =&gt; clic + 1); \n  }  return ( \n    &lt;div&gt; \n      &lt;button onClick={handleClick}&gt;Changer de couleur&lt;/button&gt; \n      &lt;h1 style={{ color: color ? &quot;red&quot; : &quot;black&quot; }}&gt; \n        Bonjour, votre nombre de clics est {clickCount} \n      &lt;/ h1&gt;\n     &lt;/div&gt; \n  ); \n}</pre><p>Sans le mécanisme de traitement par lots, le code ci-dessus affichera à nouveau l&#39;interface utilisateur deux fois à chaque handleClick()appel de la méthode. D&#39;abord pour mettre à jour la couleur, puis une fois de plus pour mettre à jour le nombre de clics.</p><p>Cependant, le mécanisme de traitement par lots mis en œuvre dans React 17 n&#39;était pas cohérent. Le traitement par lots ne se produira pas lorsque vous appelez les méthodes de mise à jour d&#39;état à partir d&#39;un rappel.</p><p>Par exemple, supposons que vous récupérez d&#39;abord les données d&#39;une API avant d&#39;appeler le setColor()et setClickCount(). Le mécanisme de traitement par lots ne s&#39;activera pas et React affichera à nouveau l&#39;interface utilisateur deux fois :</p><pre>function handleClick() { \n  fetchUserData().then(() =&gt; { \n    setCount(c =&gt; c + 1); // Provoque un nouveau rendu! \n    setFlag(f =&gt; !f); // Provoque un nouveau rendu ! \n  }); \n}function fetchUserDate(){ \n  // code omis par souci de concision... \n}</pre><p>La même chose se produit lorsque vous placez les méthodes de mise à jour d&#39;état dans un setTimeout()rappel :</p><pre>function handleClick() { \n  setTimeout(() =&gt; { \n    setColor((color) =&gt; !color); \n    setClickCount((click) =&gt; click + 1); \n  }, 1000); \n}</pre><p>React 18 a résolu le problème ci-dessus en améliorant le mécanisme de dosage.</p><p>Désormais, le traitement par lots est déclenché lorsque plusieurs méthodes de mise à jour d&#39;état sont appelées à partir de promesses internes, de setTimeout, de gestionnaires d&#39;événements natifs ou de tout autre événement qui n&#39;a pas été précédemment traité par React.</p><p>La page de discussion de cette fonctionnalité se trouve <a  href=\"https://github.com/reactwg/react-18/discussions/21\">ici</a> .</p><h1>Prise en charge SSR pour &lt;Suspense&gt;</h1><p>Le &lt;Suspense&gt;composant est une fonctionnalité de la bibliothèque React qui vous permet d&#39;attendre le chargement d&#39;un certain code en ajoutant un fallbackcomposant à restituer avant que le code ne soit chargé.</p><p>Voici un exemple &lt;Suspense&gt;en action :</p><pre>&lt;Suspense fallback={&lt;LoadingSpinner /&gt;}&gt;\n   &lt;UserProfile /&gt; \n&lt;Suspense /&gt;</pre><p>Vous pouvez en savoir plus sur la &lt;Suspense&gt;documentation React.</p><p>Dans React 18, la &lt;Suspense&gt;fonctionnalité est prise en charge même lorsque vous rendez vos composants sur le serveur à l&#39;aide de SSR. Cette mise à jour vous permet d&#39;encapsuler les composants rendus par le serveur dans un &lt;Suspense&gt;composant.</p><p>Tous les composants côté serveur enveloppés à l&#39;intérieur &lt;Suspense&gt;seront d&#39;abord diffusés en HTML à l&#39;aide du fallbackcomposant, et une fois le composant prêt, React enverra de nouveaux bits de HTML pour remplacer le fallbackcomposant.</p><p>Par exemple, supposons que vous ayez les composants an &lt;Article&gt;et a &lt;Comments&gt;comme suit :</p><pre>&lt;Layout&gt; \n  &lt; Article /&gt; \n  &lt;Suspense fallback={&lt;Spinner /&gt;}&gt;\n     &lt;Commentaires /&gt; \n  &lt;/Suspense&gt;\n &lt;/Layout&gt;</pre><p>Lors du rendu à partir du serveur, le &lt;Article&gt;composant sera prioritaire et le &lt;Comments&gt;composant sera remplacé par le composant de secours &lt;Spinner&gt;. Une fois le &lt;Comments&gt;composant rendu sur le serveur, React l&#39;enverra au navigateur, remplaçant le &lt;Spinner&gt;composant.</p><p>Pour une explication plus approfondie sur SSR et Suspense, vous pouvez visiter la page de <a  href=\"https://github.com/reactwg/react-18/discussions/37\">discussion GitHub</a> suivante .</p><h1>L&#39;API startTransition pour les mises à jour d&#39;état non urgentes</h1><p>L&#39; startTransitionAPI est une nouvelle fonctionnalité de React 18 conçue pour aider votre application à rester réactive pendant la mise à jour de l&#39;état qui nécessite une puissance de calcul importante pour rendre l&#39;interface utilisateur.</p><p>Un exemple d&#39;une telle mise à jour est lorsque vous créez une zone de saisie qui filtre une liste de données. La mise à jour de l&#39;état nécessite que votre application React calcule et affiche uniquement les données qui correspondent au filtre.</p><p>Vous pouvez avoir deux méthodes de mise à jour d&#39;état : une pour gérer le changement de valeur d&#39;entrée et l&#39;autre pour gérer la requête de filtre.</p><pre>// Définit l&#39;état de la valeur d&#39;entrée \nsetInputValue(input); \n\n// Définit l&#39;entrée de la requête de recherche. Réfléchi plus tard sur l&#39;interface utilisateur \nsetSearchQuery(input);</pre><p>Lorsque la quantité d&#39;éléments à filtrer augmente, le calcul pour filtrer les éléments est également augmenté. Cela peut rendre votre application <em>lente ou même geler</em> pendant le calcul.</p><p>Pour atténuer ce problème, React vous permet de marquer certaines mises à jour comme des <strong>transitions </strong><em><strong></strong>.</em></p><p>Les mises à jour de transition sont traitées comme des mises à jour non urgentes, permettant à React de prioriser les mises à jour urgentes en premier.</p><p>Revenons à l&#39;exemple, la mise à jour de la requête de recherche peut être retardée en l&#39;encapsulant dans l&#39; startTransitionAPI comme suit :</p><pre>import { startTransition } depuis &#39;react&#39; ;// Urgent : Afficher ce qui a été tapé \nsetInputValue(input);// Marque toutes les mises à jour d&#39;état à l&#39;intérieur comme transitions \nstartTransition(() =&gt; { \n  setSearchQuery(input); \n});</pre><p>Les mises à jour incluses startTransitionseront interrompues lorsque des mises à jour plus importantes sont déclenchées.</p><p>Dans l&#39;exemple ci-dessus, la mise à jour de transition pour la requête de recherche sera arrêtée lorsque l&#39;utilisateur tape plusieurs caractères à la suite. Cela optimise les performances de rendu de React et supprime les calculs inutiles pour les mises à jour obsolètes.</p><p>Vous pouvez trouver plus d&#39;informations sur l&#39; <a  href=\"https://github.com/reactwg/react-18/discussions/41\">API startTransition ici</a> .</p><h1>Conclusion</h1><p>Alors que plusieurs fonctionnalités mentionnées dans la page d&#39; <a  href=\"https://github.com/reactwg/react-18/discussions/4\">introduction de React 18</a> n&#39;ont même pas encore été publiées ( useDeferredValueet &lt;SuspenseList&gt;par exemple)</p><p>React 18 Alpha apporte déjà plusieurs fonctionnalités intéressantes à React qui améliorent la puissance de simultanéité de la bibliothèque. Vous pouvez l&#39;essayer en installant le @alphabuild de reactet la react-dombibliothèque.</p><p>Il n&#39;y a pas encore non plus de mise à jour sur les <a  href=\"https://blog.bitsrc.io/react-server-components-1ca621ac2519\">composants du serveur React</a> , mais les nouvelles fonctionnalités simultanées telles que la prise en charge SSR de Suspense et la diffusion HTML en continu depuis le serveur peuvent aider à implémenter les composants du serveur ultérieurement.</p><p>Le <a  href=\"https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html\">calendrier de sortie de React 18</a> est le suivant :</p><ul><li>Version alpha pour recueillir des commentaires et offrir un support pour le groupe de travail React (Disponible aujourd&#39;hui)</li><li>Bêta publique pour que tout le monde puisse l&#39;essayer (au moins plusieurs mois après la sortie de la version Alpha)</li><li>Release Candidate (RC) build plusieurs semaines après la version bêta publique</li><li>La version stable sera plusieurs semaines après RC</li></ul><p>Merci d&#39;avoir lu cet article. N&#39;hésitez pas à essayer React 18 vous-même, mais sachez qu&#39;il peut y avoir des changements importants en fonction de la complexité de votre application React.</p>","raw":[{"type":"heading1","text":"","spans":[]},{"type":"paragraph","text":"Les fonctionnalités notables que vous pouvez déjà essayer dans React 18 sont les suivantes :","spans":[]},{"type":"list-item","text":"La nouvelle ReactDOM.createRoot()API remplaçantReactDOM.render()","spans":[]},{"type":"list-item","text":"Améliorations des lots pour moins de rendus","spans":[]},{"type":"list-item","text":"Prise en charge SSR pour le <Suspense>composant","spans":[]},{"type":"list-item","text":"startTransition API pour les mises à jour d'état non urgentes","spans":[]},{"type":"paragraph","text":"Pour essayer React 18 Alpha dans votre projet, vous pouvez installer la @alphaversion depuis NPM ou Yarn :","spans":[]},{"type":"preformatted","text":"npm install react@alpha react-dom@alpha \n# ou \nwire add react@alpha react-dom@alpha","spans":[]},{"type":"paragraph","text":"Si vous démarrez votre application React à l'aide d'une application Create React, vous pouvez rencontrer une erreur could not resolve dependencycausée par ce react-scriptsqui suit :","spans":[]},{"type":"preformatted","text":"Impossible de résoudre la dépendance : \npeer react@\">= 16\" de react-scripts@4.0.3","spans":[]},{"type":"paragraph","text":"Vous pouvez utiliser le --forcedrapeau pour pouvoir mettre à jour à la fois reactet les react-dombibliothèques :","spans":[]},{"type":"preformatted","text":"npm install react@alpha react-dom@alpha --force","spans":[]},{"type":"paragraph","text":"Ce tutoriel vous aidera à apprendre les nouvelles fonctionnalités déjà présentes dans React 18 Alpha que j'ai pu essayer moi-même.","spans":[]},{"type":"heading1","text":"API ReactDOM.createRoot() expliquée","spans":[]},{"type":"paragraph","text":"La ReactDOM.createRoot()méthode remplace la ReactDOM.render()méthode que vous utilisez normalement comme point d'entrée de votre application React.","spans":[]},{"type":"paragraph","text":"La méthode est créée pour empêcher la mise à jour de React 18 de planter votre application. La nouvelle méthode vous permet également de créer une version de production à l'aide de React 18 Alpha et de comparer les performances avec React 17.","spans":[]},{"type":"paragraph","text":"Voici un exemple d'utilisation de la createRoot()méthode :","spans":[]},{"type":"preformatted","text":"importer React à partir de « react » ; \nimporter ReactDOM depuis 'react-dom' ; \nimporter l'application depuis './App' ;const conteneur = document.getElementById('root');// Créer une racine. \nconst root = ReactDOM.createRoot(conteneur);// Rendu du composant supérieur à la racine. \nroot.render(<App />);","spans":[]},{"type":"paragraph","text":"Lorsque vous effectuez la mise à jour vers React 18, un journal des erreurs apparaît dans la console lorsque vous l'utilisez .render()comme point d'entrée, vous indiquant de passer à la nouvelle API racine à la place.","spans":[]},{"type":"paragraph","text":"Vous ne pouvez essayer les fonctionnalités de React 18 qu'après avoir utilisé la createRoot()méthode.","spans":[{"start":55,"end":63,"type":"strong"}]},{"type":"paragraph","text":"Pour plus d'informations, vous pouvez visiter la page de discussion createRoot ici .","spans":[{"start":49,"end":82,"type":"hyperlink","data":{"link_type":"Web","url":"https://github.com/reactwg/react-18/discussions/5"}}]},{"type":"heading1","text":"Améliorations automatiques du traitement par lots pour le rendu","spans":[]},{"type":"paragraph","text":"Comme vous le savez peut-être déjà, React est une bibliothèque qui restitue l'interface utilisateur à la suite de changements d'état.","spans":[]},{"type":"paragraph","text":"Par exemple, lorsque vous modifiez la valeur d'un état arbitraire de trueà false, React doit « réagir » en restituant l'interface utilisateur, en ajustant ce que vous voyez à l'écran en fonction du code que vous avez écrit.","spans":[]},{"type":"paragraph","text":"Le <App>composant suivant affichera un en-tête de couleur noire ou rouge en fonction de la colorvaleur d'état :","spans":[]},{"type":"preformatted","text":"function App() { \n  const [color, setColor] = useState(false);  function handleClick() { \n    setColor((couleur) => !couleur); // réagir aux re-rendus \n  }  return ( \n    <div> \n      <button onClick={handleClick}>Changer de couleur</button> \n      <h1 style={{ color: color ? \"red\" : \"black\" }}>Bonjour</h1> \n    </div> \n  ); \n}","spans":[]},{"type":"paragraph","text":"Chaque fois que la setColor()méthode est exécutée, React restituera immédiatement l'interface utilisateur.","spans":[]},{"type":"paragraph","text":"Le traitement par lots est un mécanisme utilisé par React pour regrouper plusieurs mises à jour d'état en un seul rendu. Avec le batching, vous éviterez les rendus inutiles et optimiserez le processus de rendu","spans":[{"start":0,"end":22,"type":"strong"}]},{"type":"paragraph","text":"Pour en revenir à l' <App>exemple de composant, ajoutons un autre état qui est mis à jour lorsque la handleClick()méthode est appelée :","spans":[]},{"type":"preformatted","text":"function App() { \n  const [color, setColor] = useState(false); \n  const [clickCount, setClickCount] = useState(0); \n  \n  function handleClick() { \n    setColor((couleur) => !couleur); \n    setClickCount((clic) => clic + 1); \n  }  return ( \n    <div> \n      <button onClick={handleClick}>Changer de couleur</button> \n      <h1 style={{ color: color ? \"red\" : \"black\" }}> \n        Bonjour, votre nombre de clics est {clickCount} \n      </ h1>\n     </div> \n  ); \n}","spans":[]},{"type":"paragraph","text":"Sans le mécanisme de traitement par lots, le code ci-dessus affichera à nouveau l'interface utilisateur deux fois à chaque handleClick()appel de la méthode. D'abord pour mettre à jour la couleur, puis une fois de plus pour mettre à jour le nombre de clics.","spans":[]},{"type":"paragraph","text":"Cependant, le mécanisme de traitement par lots mis en œuvre dans React 17 n'était pas cohérent. Le traitement par lots ne se produira pas lorsque vous appelez les méthodes de mise à jour d'état à partir d'un rappel.","spans":[]},{"type":"paragraph","text":"Par exemple, supposons que vous récupérez d'abord les données d'une API avant d'appeler le setColor()et setClickCount(). Le mécanisme de traitement par lots ne s'activera pas et React affichera à nouveau l'interface utilisateur deux fois :","spans":[]},{"type":"preformatted","text":"function handleClick() { \n  fetchUserData().then(() => { \n    setCount(c => c + 1); // Provoque un nouveau rendu! \n    setFlag(f => !f); // Provoque un nouveau rendu ! \n  }); \n}function fetchUserDate(){ \n  // code omis par souci de concision... \n}","spans":[]},{"type":"paragraph","text":"La même chose se produit lorsque vous placez les méthodes de mise à jour d'état dans un setTimeout()rappel :","spans":[]},{"type":"preformatted","text":"function handleClick() { \n  setTimeout(() => { \n    setColor((color) => !color); \n    setClickCount((click) => click + 1); \n  }, 1000); \n}","spans":[]},{"type":"paragraph","text":"React 18 a résolu le problème ci-dessus en améliorant le mécanisme de dosage.","spans":[]},{"type":"paragraph","text":"Désormais, le traitement par lots est déclenché lorsque plusieurs méthodes de mise à jour d'état sont appelées à partir de promesses internes, de setTimeout, de gestionnaires d'événements natifs ou de tout autre événement qui n'a pas été précédemment traité par React.","spans":[]},{"type":"paragraph","text":"La page de discussion de cette fonctionnalité se trouve ici .","spans":[{"start":56,"end":59,"type":"hyperlink","data":{"link_type":"Web","url":"https://github.com/reactwg/react-18/discussions/21"}}]},{"type":"heading1","text":"Prise en charge SSR pour <Suspense>","spans":[]},{"type":"paragraph","text":"Le <Suspense>composant est une fonctionnalité de la bibliothèque React qui vous permet d'attendre le chargement d'un certain code en ajoutant un fallbackcomposant à restituer avant que le code ne soit chargé.","spans":[]},{"type":"paragraph","text":"Voici un exemple <Suspense>en action :","spans":[]},{"type":"preformatted","text":"<Suspense fallback={<LoadingSpinner />}>\n   <UserProfile /> \n<Suspense />","spans":[]},{"type":"paragraph","text":"Vous pouvez en savoir plus sur la <Suspense>documentation React.","spans":[]},{"type":"paragraph","text":"Dans React 18, la <Suspense>fonctionnalité est prise en charge même lorsque vous rendez vos composants sur le serveur à l'aide de SSR. Cette mise à jour vous permet d'encapsuler les composants rendus par le serveur dans un <Suspense>composant.","spans":[]},{"type":"paragraph","text":"Tous les composants côté serveur enveloppés à l'intérieur <Suspense>seront d'abord diffusés en HTML à l'aide du fallbackcomposant, et une fois le composant prêt, React enverra de nouveaux bits de HTML pour remplacer le fallbackcomposant.","spans":[]},{"type":"paragraph","text":"Par exemple, supposons que vous ayez les composants an <Article>et a <Comments>comme suit :","spans":[]},{"type":"preformatted","text":"<Layout> \n  < Article /> \n  <Suspense fallback={<Spinner />}>\n     <Commentaires /> \n  </Suspense>\n </Layout>","spans":[]},{"type":"paragraph","text":"Lors du rendu à partir du serveur, le <Article>composant sera prioritaire et le <Comments>composant sera remplacé par le composant de secours <Spinner>. Une fois le <Comments>composant rendu sur le serveur, React l'enverra au navigateur, remplaçant le <Spinner>composant.","spans":[]},{"type":"paragraph","text":"Pour une explication plus approfondie sur SSR et Suspense, vous pouvez visiter la page de discussion GitHub suivante .","spans":[{"start":90,"end":107,"type":"hyperlink","data":{"link_type":"Web","url":"https://github.com/reactwg/react-18/discussions/37"}}]},{"type":"heading1","text":"L'API startTransition pour les mises à jour d'état non urgentes","spans":[]},{"type":"paragraph","text":"L' startTransitionAPI est une nouvelle fonctionnalité de React 18 conçue pour aider votre application à rester réactive pendant la mise à jour de l'état qui nécessite une puissance de calcul importante pour rendre l'interface utilisateur.","spans":[]},{"type":"paragraph","text":"Un exemple d'une telle mise à jour est lorsque vous créez une zone de saisie qui filtre une liste de données. La mise à jour de l'état nécessite que votre application React calcule et affiche uniquement les données qui correspondent au filtre.","spans":[]},{"type":"paragraph","text":"Vous pouvez avoir deux méthodes de mise à jour d'état : une pour gérer le changement de valeur d'entrée et l'autre pour gérer la requête de filtre.","spans":[]},{"type":"preformatted","text":"// Définit l'état de la valeur d'entrée \nsetInputValue(input); \n\n// Définit l'entrée de la requête de recherche. Réfléchi plus tard sur l'interface utilisateur \nsetSearchQuery(input);","spans":[]},{"type":"paragraph","text":"Lorsque la quantité d'éléments à filtrer augmente, le calcul pour filtrer les éléments est également augmenté. Cela peut rendre votre application lente ou même geler pendant le calcul.","spans":[{"start":146,"end":165,"type":"em"}]},{"type":"paragraph","text":"Pour atténuer ce problème, React vous permet de marquer certaines mises à jour comme des transitions .","spans":[{"start":89,"end":101,"type":"strong"},{"start":101,"end":102,"type":"em"}]},{"type":"paragraph","text":"Les mises à jour de transition sont traitées comme des mises à jour non urgentes, permettant à React de prioriser les mises à jour urgentes en premier.","spans":[]},{"type":"paragraph","text":"Revenons à l'exemple, la mise à jour de la requête de recherche peut être retardée en l'encapsulant dans l' startTransitionAPI comme suit :","spans":[]},{"type":"preformatted","text":"import { startTransition } depuis 'react' ;// Urgent : Afficher ce qui a été tapé \nsetInputValue(input);// Marque toutes les mises à jour d'état à l'intérieur comme transitions \nstartTransition(() => { \n  setSearchQuery(input); \n});","spans":[]},{"type":"paragraph","text":"Les mises à jour incluses startTransitionseront interrompues lorsque des mises à jour plus importantes sont déclenchées.","spans":[]},{"type":"paragraph","text":"Dans l'exemple ci-dessus, la mise à jour de transition pour la requête de recherche sera arrêtée lorsque l'utilisateur tape plusieurs caractères à la suite. Cela optimise les performances de rendu de React et supprime les calculs inutiles pour les mises à jour obsolètes.","spans":[]},{"type":"paragraph","text":"Vous pouvez trouver plus d'informations sur l' API startTransition ici .","spans":[{"start":47,"end":70,"type":"hyperlink","data":{"link_type":"Web","url":"https://github.com/reactwg/react-18/discussions/41"}}]},{"type":"heading1","text":"Conclusion","spans":[]},{"type":"paragraph","text":"Alors que plusieurs fonctionnalités mentionnées dans la page d' introduction de React 18 n'ont même pas encore été publiées ( useDeferredValueet <SuspenseList>par exemple)","spans":[{"start":64,"end":88,"type":"hyperlink","data":{"link_type":"Web","url":"https://github.com/reactwg/react-18/discussions/4"}}]},{"type":"paragraph","text":"React 18 Alpha apporte déjà plusieurs fonctionnalités intéressantes à React qui améliorent la puissance de simultanéité de la bibliothèque. Vous pouvez l'essayer en installant le @alphabuild de reactet la react-dombibliothèque.","spans":[]},{"type":"paragraph","text":"Il n'y a pas encore non plus de mise à jour sur les composants du serveur React , mais les nouvelles fonctionnalités simultanées telles que la prise en charge SSR de Suspense et la diffusion HTML en continu depuis le serveur peuvent aider à implémenter les composants du serveur ultérieurement.","spans":[{"start":52,"end":79,"type":"hyperlink","data":{"link_type":"Web","url":"https://blog.bitsrc.io/react-server-components-1ca621ac2519"}}]},{"type":"paragraph","text":"Le calendrier de sortie de React 18 est le suivant :","spans":[{"start":3,"end":35,"type":"hyperlink","data":{"link_type":"Web","url":"https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html"}}]},{"type":"list-item","text":"Version alpha pour recueillir des commentaires et offrir un support pour le groupe de travail React (Disponible aujourd'hui)","spans":[]},{"type":"list-item","text":"Bêta publique pour que tout le monde puisse l'essayer (au moins plusieurs mois après la sortie de la version Alpha)","spans":[]},{"type":"list-item","text":"Release Candidate (RC) build plusieurs semaines après la version bêta publique","spans":[]},{"type":"list-item","text":"La version stable sera plusieurs semaines après RC","spans":[]},{"type":"paragraph","text":"Merci d'avoir lu cet article. N'hésitez pas à essayer React 18 vous-même, mais sachez qu'il peut y avoir des changements importants en fonction de la complexité de votre application React.","spans":[]}],"text":" Les fonctionnalités notables que vous pouvez déjà essayer dans React 18 sont les suivantes : La nouvelle ReactDOM.createRoot()API remplaçantReactDOM.render() Améliorations des lots pour moins de rendus Prise en charge SSR pour le <Suspense>composant startTransition API pour les mises à jour d'état non urgentes Pour essayer React 18 Alpha dans votre projet, vous pouvez installer la @alphaversion depuis NPM ou Yarn : npm install react@alpha react-dom@alpha \n# ou \nwire add react@alpha react-dom@alpha Si vous démarrez votre application React à l'aide d'une application Create React, vous pouvez rencontrer une erreur could not resolve dependencycausée par ce react-scriptsqui suit : Impossible de résoudre la dépendance : \npeer react@\">= 16\" de react-scripts@4.0.3 Vous pouvez utiliser le --forcedrapeau pour pouvoir mettre à jour à la fois reactet les react-dombibliothèques : npm install react@alpha react-dom@alpha --force Ce tutoriel vous aidera à apprendre les nouvelles fonctionnalités déjà présentes dans React 18 Alpha que j'ai pu essayer moi-même. API ReactDOM.createRoot() expliquée La ReactDOM.createRoot()méthode remplace la ReactDOM.render()méthode que vous utilisez normalement comme point d'entrée de votre application React. La méthode est créée pour empêcher la mise à jour de React 18 de planter votre application. La nouvelle méthode vous permet également de créer une version de production à l'aide de React 18 Alpha et de comparer les performances avec React 17. Voici un exemple d'utilisation de la createRoot()méthode : importer React à partir de « react » ; \nimporter ReactDOM depuis 'react-dom' ; \nimporter l'application depuis './App' ;const conteneur = document.getElementById('root');// Créer une racine. \nconst root = ReactDOM.createRoot(conteneur);// Rendu du composant supérieur à la racine. \nroot.render(<App />); Lorsque vous effectuez la mise à jour vers React 18, un journal des erreurs apparaît dans la console lorsque vous l'utilisez .render()comme point d'entrée, vous indiquant de passer à la nouvelle API racine à la place. Vous ne pouvez essayer les fonctionnalités de React 18 qu'après avoir utilisé la createRoot()méthode. Pour plus d'informations, vous pouvez visiter la page de discussion createRoot ici . Améliorations automatiques du traitement par lots pour le rendu Comme vous le savez peut-être déjà, React est une bibliothèque qui restitue l'interface utilisateur à la suite de changements d'état. Par exemple, lorsque vous modifiez la valeur d'un état arbitraire de trueà false, React doit « réagir » en restituant l'interface utilisateur, en ajustant ce que vous voyez à l'écran en fonction du code que vous avez écrit. Le <App>composant suivant affichera un en-tête de couleur noire ou rouge en fonction de la colorvaleur d'état : function App() { \n  const [color, setColor] = useState(false);  function handleClick() { \n    setColor((couleur) => !couleur); // réagir aux re-rendus \n  }  return ( \n    <div> \n      <button onClick={handleClick}>Changer de couleur</button> \n      <h1 style={{ color: color ? \"red\" : \"black\" }}>Bonjour</h1> \n    </div> \n  ); \n} Chaque fois que la setColor()méthode est exécutée, React restituera immédiatement l'interface utilisateur. Le traitement par lots est un mécanisme utilisé par React pour regrouper plusieurs mises à jour d'état en un seul rendu. Avec le batching, vous éviterez les rendus inutiles et optimiserez le processus de rendu Pour en revenir à l' <App>exemple de composant, ajoutons un autre état qui est mis à jour lorsque la handleClick()méthode est appelée : function App() { \n  const [color, setColor] = useState(false); \n  const [clickCount, setClickCount] = useState(0); \n  \n  function handleClick() { \n    setColor((couleur) => !couleur); \n    setClickCount((clic) => clic + 1); \n  }  return ( \n    <div> \n      <button onClick={handleClick}>Changer de couleur</button> \n      <h1 style={{ color: color ? \"red\" : \"black\" }}> \n        Bonjour, votre nombre de clics est {clickCount} \n      </ h1>\n     </div> \n  ); \n} Sans le mécanisme de traitement par lots, le code ci-dessus affichera à nouveau l'interface utilisateur deux fois à chaque handleClick()appel de la méthode. D'abord pour mettre à jour la couleur, puis une fois de plus pour mettre à jour le nombre de clics. Cependant, le mécanisme de traitement par lots mis en œuvre dans React 17 n'était pas cohérent. Le traitement par lots ne se produira pas lorsque vous appelez les méthodes de mise à jour d'état à partir d'un rappel. Par exemple, supposons que vous récupérez d'abord les données d'une API avant d'appeler le setColor()et setClickCount(). Le mécanisme de traitement par lots ne s'activera pas et React affichera à nouveau l'interface utilisateur deux fois : function handleClick() { \n  fetchUserData().then(() => { \n    setCount(c => c + 1); // Provoque un nouveau rendu! \n    setFlag(f => !f); // Provoque un nouveau rendu ! \n  }); \n}function fetchUserDate(){ \n  // code omis par souci de concision... \n} La même chose se produit lorsque vous placez les méthodes de mise à jour d'état dans un setTimeout()rappel : function handleClick() { \n  setTimeout(() => { \n    setColor((color) => !color); \n    setClickCount((click) => click + 1); \n  }, 1000); \n} React 18 a résolu le problème ci-dessus en améliorant le mécanisme de dosage. Désormais, le traitement par lots est déclenché lorsque plusieurs méthodes de mise à jour d'état sont appelées à partir de promesses internes, de setTimeout, de gestionnaires d'événements natifs ou de tout autre événement qui n'a pas été précédemment traité par React. La page de discussion de cette fonctionnalité se trouve ici . Prise en charge SSR pour <Suspense> Le <Suspense>composant est une fonctionnalité de la bibliothèque React qui vous permet d'attendre le chargement d'un certain code en ajoutant un fallbackcomposant à restituer avant que le code ne soit chargé. Voici un exemple <Suspense>en action : <Suspense fallback={<LoadingSpinner />}>\n   <UserProfile /> \n<Suspense /> Vous pouvez en savoir plus sur la <Suspense>documentation React. Dans React 18, la <Suspense>fonctionnalité est prise en charge même lorsque vous rendez vos composants sur le serveur à l'aide de SSR. Cette mise à jour vous permet d'encapsuler les composants rendus par le serveur dans un <Suspense>composant. Tous les composants côté serveur enveloppés à l'intérieur <Suspense>seront d'abord diffusés en HTML à l'aide du fallbackcomposant, et une fois le composant prêt, React enverra de nouveaux bits de HTML pour remplacer le fallbackcomposant. Par exemple, supposons que vous ayez les composants an <Article>et a <Comments>comme suit : <Layout> \n  < Article /> \n  <Suspense fallback={<Spinner />}>\n     <Commentaires /> \n  </Suspense>\n </Layout> Lors du rendu à partir du serveur, le <Article>composant sera prioritaire et le <Comments>composant sera remplacé par le composant de secours <Spinner>. Une fois le <Comments>composant rendu sur le serveur, React l'enverra au navigateur, remplaçant le <Spinner>composant. Pour une explication plus approfondie sur SSR et Suspense, vous pouvez visiter la page de discussion GitHub suivante . L'API startTransition pour les mises à jour d'état non urgentes L' startTransitionAPI est une nouvelle fonctionnalité de React 18 conçue pour aider votre application à rester réactive pendant la mise à jour de l'état qui nécessite une puissance de calcul importante pour rendre l'interface utilisateur. Un exemple d'une telle mise à jour est lorsque vous créez une zone de saisie qui filtre une liste de données. La mise à jour de l'état nécessite que votre application React calcule et affiche uniquement les données qui correspondent au filtre. Vous pouvez avoir deux méthodes de mise à jour d'état : une pour gérer le changement de valeur d'entrée et l'autre pour gérer la requête de filtre. // Définit l'état de la valeur d'entrée \nsetInputValue(input); \n\n// Définit l'entrée de la requête de recherche. Réfléchi plus tard sur l'interface utilisateur \nsetSearchQuery(input); Lorsque la quantité d'éléments à filtrer augmente, le calcul pour filtrer les éléments est également augmenté. Cela peut rendre votre application lente ou même geler pendant le calcul. Pour atténuer ce problème, React vous permet de marquer certaines mises à jour comme des transitions . Les mises à jour de transition sont traitées comme des mises à jour non urgentes, permettant à React de prioriser les mises à jour urgentes en premier. Revenons à l'exemple, la mise à jour de la requête de recherche peut être retardée en l'encapsulant dans l' startTransitionAPI comme suit : import { startTransition } depuis 'react' ;// Urgent : Afficher ce qui a été tapé \nsetInputValue(input);// Marque toutes les mises à jour d'état à l'intérieur comme transitions \nstartTransition(() => { \n  setSearchQuery(input); \n}); Les mises à jour incluses startTransitionseront interrompues lorsque des mises à jour plus importantes sont déclenchées. Dans l'exemple ci-dessus, la mise à jour de transition pour la requête de recherche sera arrêtée lorsque l'utilisateur tape plusieurs caractères à la suite. Cela optimise les performances de rendu de React et supprime les calculs inutiles pour les mises à jour obsolètes. Vous pouvez trouver plus d'informations sur l' API startTransition ici . Conclusion Alors que plusieurs fonctionnalités mentionnées dans la page d' introduction de React 18 n'ont même pas encore été publiées ( useDeferredValueet <SuspenseList>par exemple) React 18 Alpha apporte déjà plusieurs fonctionnalités intéressantes à React qui améliorent la puissance de simultanéité de la bibliothèque. Vous pouvez l'essayer en installant le @alphabuild de reactet la react-dombibliothèque. Il n'y a pas encore non plus de mise à jour sur les composants du serveur React , mais les nouvelles fonctionnalités simultanées telles que la prise en charge SSR de Suspense et la diffusion HTML en continu depuis le serveur peuvent aider à implémenter les composants du serveur ultérieurement. Le calendrier de sortie de React 18 est le suivant : Version alpha pour recueillir des commentaires et offrir un support pour le groupe de travail React (Disponible aujourd'hui) Bêta publique pour que tout le monde puisse l'essayer (au moins plusieurs mois après la sortie de la version Alpha) Release Candidate (RC) build plusieurs semaines après la version bêta publique La version stable sera plusieurs semaines après RC Merci d'avoir lu cet article. N'hésitez pas à essayer React 18 vous-même, mais sachez qu'il peut y avoir des changements importants en fonction de la complexité de votre application React."},"date":null,"item_image":{"url":"https://images.prismic.io/multilang-prismic-gatsby-example/ff96898c-e2e8-4964-8d75-c53fdd74ee04_1_ZVFiavGnNXNIhQwuhMHUgQ.png?auto=compress%2Cformat"},"short_description":{"html":"<p>L&#39;équipe React a récemment publié une nouvelle <a  href=\"https://github.com/reactwg/react-18/discussions/4\">version alpha de React 18</a> . Le principal ajout à cette nouvelle version est des fonctionnalités simultanées qui améliorent les performances de votre application React.</p>","raw":[{"type":"paragraph","text":"L'équipe React a récemment publié une nouvelle version alpha de React 18 . Le principal ajout à cette nouvelle version est des fonctionnalités simultanées qui améliorent les performances de votre application React.","spans":[{"start":47,"end":72,"type":"hyperlink","data":{"link_type":"Web","url":"https://github.com/reactwg/react-18/discussions/4"}}]}],"text":"L'équipe React a récemment publié une nouvelle version alpha de React 18 . Le principal ajout à cette nouvelle version est des fonctionnalités simultanées qui améliorent les performances de votre application React."}}],"slice_label":null,"slice_type":"blog","primary":{"blog_title":{"html":"<h1>Mon blog</h1>","raw":[{"type":"heading1","text":"Mon blog","spans":[]}],"text":"Mon blog"}}}]}},"prismicTopMenu":{"type":"top_menu","lang":"fr-fr","data":{"menu_links":[{"label":{"raw":[{"type":"paragraph","text":"Page accueil","spans":[]}],"html":"<p>Page accueil</p>","text":"Page accueil"},"link":{"id":"Xs5SSREAACQAInz5","url":"/fr-fr"}},{"label":{"raw":[{"type":"paragraph","text":"Sur moi","spans":[]}],"html":"<p>Sur moi</p>","text":"Sur moi"},"link":{"id":"Xs5ushEAACQAIvjn","url":"/page/fr-fr/about-me"}},{"label":{"raw":[{"type":"paragraph","text":"Mes projets","spans":[]}],"html":"<p>Mes projets</p>","text":"Mes projets"},"link":{"id":"YMDFShEAACUA047R","url":"/page/fr-fr/my-projects"}},{"label":{"raw":[{"type":"paragraph","text":"Blog","spans":[]}],"html":"<p>Blog</p>","text":"Blog"},"link":{"id":"YMImExEAACIA2XDG","url":"/page/fr-fr/blog-page"}},{"label":{"raw":[{"type":"paragraph","text":"MetaMask","spans":[]}],"html":"<p>MetaMask</p>","text":"MetaMask"},"link":{"id":"YMM2lREAACIA3jOw","url":"/page/fr-fr/metamask"}}]}}},"pageContext":{"id":"f811743b-1e0a-5271-bb00-a34f16d6e432","uid":"blog-page","lang":"fr-fr","type":"page","url":"/page/fr-fr/blog-page"}}